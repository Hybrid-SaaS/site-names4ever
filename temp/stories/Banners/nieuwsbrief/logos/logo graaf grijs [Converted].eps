%!PS-Adobe-3.1 EPSF-3.0%%Title: logo graaf grijs [Converted].ep%%Creator: Adobe Illustrator(R) 11%%AI8_CreatorVersion: 11.0.0%AI9_PrintingDataBegin%%For: jc%%CreationDate: 20-04-2007%%BoundingBox: 0 0 434 63%%HiResBoundingBox: 0 0 433.6314 62.1089%%CropBox: 0 0 433.6314 62.1089%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)%%+ procset Adobe_CoolType_Core (2.23 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 68 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/agm_sethalftone{ 	dup	begin		/_Data load		/Thresholds xdf	end	level3 	{ sethalftone }{		dup /HalftoneType get 3 eq {			sethalftone		} {pop} ifelse	}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ imageDict begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height { 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 	dup type /dicttype eq		{			AGMCORE_tmp			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			AGMCORE_tmp exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	AGMCORE_tmp 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{	/indexed_colorspace_dict AGMCORE_gget dup null ne {		/CSD known	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 216 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_gradientcache 32 dict def/AGMCORE_in_pattern false def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/add_grad{	AGMCORE_gradientcache 3 1 roll put}bdf/exec_grad{	AGMCORE_gradientcache exch get exec}bdf/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&usrshfill /shfill load def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not currentpagedevice/OverrideSeparations known and							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		/AGMCORE_IsSeparationAProcessColor			{			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or			}def		level3 {			/AGMCORE_IsCurrentColor				{				gsave				false setoverprint				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor				currentgray 0 eq 				grestore				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				clonedict				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					currentdict end					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop								[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 xpt					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 xpt						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/currentpagedevice currentpagedevice def/getrampcolor {/indx exch def0 1 NumComp 1 sub {dupSamples exch getdup type /stringtype eq { indx get } ifexchScaling exch get aload pop3 1 rollmul add} forColorSpaceFamily /Separation eq	{	sep	}	{	ColorSpaceFamily /DeviceN eq		{		devn		}		{		setcolor		}ifelse	}ifelse} bind def/sssetbackground { aload pop setcolor } bind def/RadialShade {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/r2 exch def/c2y exch def/c2x exch def/r1 exch def/c1y exch def/c1x exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifc1x c2x eq{c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse}{/slope c2y c1y sub c2x c1x sub div def/theta slope 1 atan defc2x c1x lt c2y c1y ge and { /theta theta 180 sub def} ifc2x c1x lt c2y c1y lt and { /theta theta 180 add def} if}ifelsegsaveclippathc1x c1y translatetheta rotate-90 rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{/max { 2 copy gt { pop } {exch pop} ifelse } bind def/min { 2 copy lt { pop } {exch pop} ifelse } bind deframpdict begin40 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavec1x c1y translatetheta rotate-90 rotate/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def/c1y 0 def/c1x 0 def/c2x 0 defext0 {0 getrampcolorc2y r2 add r1 sub 0.0001 lt{c1x c1y r1 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2y r1 add r2 le{c1x c1y r1 0 360 arcfill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r1 neg def/p1y c1y def/p2x r1 def/p2y c1y defp1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y p1x SS1 div neg def/SS2 90 theta sub dup sin exch cos div def/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y p2x SS2 div neg defr1 r2 gt{/L1maxX p1x yMin p1y sub SS1 div add def/L2maxX p2x yMin p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifc1x c2x sub dup mulc1y c2y sub dup muladd 0.5 exp0 dtransformdup mul exch dup mul add 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if pop/hires exch defhires mul/numpix exch def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} if/xInc c2x c1x sub numsteps div def/yInc c2y c1y sub numsteps div def/rInc r2 r1 sub numsteps div def/cx c1x def/cy c1y def/radius r1 defnewpathxInc 0 eq yInc 0 eq rInc 0 eq and and{0 getrampcolorcx cy radius 0 360 arcstrokeNumSamples 1 sub getrampcolorcx cy radius 72 hires div add 0 360 arc0 setlinewidthstroke}{0numsteps{dupsubsampling { round cvi } ifgetrampcolorcx cy radius 0 360 arc/cx cx xInc add def/cy cy yInc add def/radius radius rInc add defcx cy radius 360 0 arcneofillrampIndxInc add}repeatpop} ifelseext1 {c2y r2 add r1 lt{c2x c2y r2 0 360 arcfill}{c2y r1 add r2 sub 0.0001 le{c2x c2y r2 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r2 neg def/p1y c2y def/p2x r2 def/p2y c2y defp1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y c2y p1x SS1 div sub def/SS2 90 theta sub dup sin exch cos div def/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y c2y p2x SS2 div sub defr1 r2 lt{/L1maxX p1x yMax p1y sub SS1 div add def/L2maxX p2x yMax p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifgrestoregrestoreendendend} ifelse} bind def/GenStrips {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/y2 exch def/x2 exch def/y1 exch def/x1 exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifx1 x2 eq{y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse}{/slope y2 y1 sub x2 x1 sub div def/theta slope 1 atan defx2 x1 lt y2 y1 ge and { /theta theta 180 sub def} ifx2 x1 lt y2 y1 lt and { /theta theta 180 add def} if}ifelsegsaveclippathx1 y1 translatetheta rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin20 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavex1 y1 translatetheta rotate/xStart 0 def/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def/ySpan yMax yMin sub def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defxStart 0 transformxEnd 0 transform3 -1 rollsub dup mul3 1 rollsub dup muladd 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if popmul/numpix exch defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} ifext0 {0 getrampcolorxMin xStart lt{ xMin yMin xMin neg ySpan rectfill } if} if/xInc xEnd xStart sub numsteps div def/x xStart def0numsteps{dupsubsampling { round cvi } ifgetrampcolorx yMin xInc ySpan rectfill/x x xInc add deframpIndxInc add}repeatpopext1 {xMax xEnd gt{ xEnd yMin xMax xEnd sub ySpan rectfill } if} ifgrestoregrestoreendendend} ifelse} bind def}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		6 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get 0 get null eq {					dup /Names get names_index get /name xdf					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq					or or or not {						/AliasedColorants false def						exit					} if				} if			} for			AliasedColorants {				dup begin				/Names new_names def				/AliasedColorants true def				/LookupTables new_LookupTables def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				currentdict /NComponents known not {					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			Names {				AvoidAliasedColorants {					/currentspotalias current_spot_alias def					false set_spot_alias				} if				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				AvoidAliasedColorants {					currentspotalias set_spot_alias				} if				/names_index names_index 1 add def			} forall			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				/setcolor ldf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSD known {			CSD get_csd /Names known {				CSD get_csd begin				currentdict devncs				AGMCORE_host_sep{					4 dict begin					/devnCompCnt Names length def					/NewLookup HiVal 1 add string def					0 1 HiVal {						/tableIndex xdf						Lookup dup type /stringtype eq {							devnCompCnt tableIndex map_index						}{							exec						} ifelse						setdevicencolor						currentgray						tableIndex exch						HiVal mul cvi 						NewLookup 3 1 roll put					} for					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt					end				}{					level3					{					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{					[/Indexed MappedCSA HiVal						[						Lookup dup type /stringtype eq							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx						]cvx					]setcolorspace_opt					}ifelse				} ifelse				end			}{			} ifelse			set_crd		}		{			/MappedCSA CSA map_csa def			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {			begin			CSD get_csd begin			map_indexed_devn			devn			end			end		}{			AGMCORE_gget/Lookup get 4 3 -1 roll map_index			pop setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		1 dict begin		/name xdf		AGMCORE_CSA_cache		{			0 get name eq {				exit			}{				pop			} ifelse		}forall		end		end	}{		pop	} ifelse}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get		dup wrap_paintproc	}if}def/wrap_paintproc{   statusdict /currentfilenameextend known{	  begin		/OldPaintProc /PaintProc load def		/PaintProc		{		  mark exch		  dup /OldPaintProc get stopped		  {closefile restore end} if		  cleartomark		}  def	  end  } {pop} ifelse} def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse	Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	Adobe_AGM_Core begin	/setcustomcolor	{		dup /customcolor_tint exch AGMCORE_gput		current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.23 0%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.23 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.23 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpacking/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel		2 copy known not			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 2 sub 1 index lt				{ pop count 1 sub }			if			dup /argCount exch def			dup 0 gt				{				exch 1 index 2 add 1 roll				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count 1 sub /restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup begin		mark			{				(*) { pop stop } 128 string /Category			resourceforall			}		stopped		cleartomark		currentdict eq dup			{ end }		if		not		}		{ false }	ifelse	def/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end	userdict /Adobe_CoolType_Data 10 dict dup		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end put	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.19 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 25 add dict copy }	{ 25 dict }ifelse putAdobe_CoolType_Utility	begin	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {			((Hex) 57 StartData			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec			} }			{ {			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	currentcolorspace 0 get dup /DeviceCMYK eq {		pop 4	}	{		/DeviceRGB eq {			pop 3		}{			1		} ifelse	} ifelse} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/srcDataStrs xdf	/dstDataStr xdf	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/samplesNeedDecoding		0 0 1 origDecode length 1 sub {			origDecode exch get add		} for		origDecode length 2 div div		dup 1 eq {			/decodeDivisor 2 origBitsPerComponent exp 1 sub def		} if		2 origBitsPerComponent exp 1 sub ne	def	[		0 1 dsCnt 1 sub [			currentdict /origMultipleDataSources get {				dup currentdict /origDataSource get exch get dup type			}{				currentdict /origDataSource get dup type			} ifelse			dup /filetype eq {				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx			}{				/stringtype ne {					/exec cvx				} if				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx			} ifelse		] cvx /for cvx		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [			0 1 Width 1 sub [				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx				currentdict /origMultipleDataSources get {					0 1 dsCnt 1 sub [						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs								BitsPerComponent /decode_image_sample load /exec cvx							} ifelse						} if					] cvx /for cvx				}{					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx							currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 					[						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx								BitsPerComponent /decode_image_sample load /exec cvx								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx							} ifelse						} if					] cvx /forall cvx				} ifelse				currentdict /convProc get /exec cvx				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx					currentdict /convProc get /filter_indexed_devn load ne {						255 /mul cvx /cvi cvx 					} if					/put cvx 				] cvx /for cvx			] cvx /for cvx			currentdict /dstDataStr get		] cvx /if cvx	] cvx bind	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	2 dict begin	dup dup	/dstDataStr exch /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						dstDataStr srcDataStrs devn_alt_datasource /exec cvx						] cvx 0 () /SubFileDecode filter def					/MultipleDataSources false def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA map_csa 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							[							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							dstDataStr srcDataStrs devn_alt_datasource /exec cvx							] cvx						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource [								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								dstDataStr srcDataStrs devn_alt_datasource /exec cvx								] cvx 0 () /SubFileDecode filter def							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get map_csa				}{					/CSD get get_csd /Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin					CSD get_csd begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (logo graaf grijs [Converted].ep) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2007-04-20T12:17:33Z</xap:CreateDate>
  <xap:ModifyDate>2007-04-20T12:17:33Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>40</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAKAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7Z5mtvOWg+WrzUk8zTXM&#xA;tooZUa0tQCC4XclGbv44qitB07zfqWj6bqM3mWZDdRQ3MsAtbWhDqH4hlVWFQcVQX5dFINb86TzO&#xA;scX6UkBZjxApJIaknb9rFWeQzwTxiSCRZYzsHQhht7jFWp7m2t1DzypCh2DSMFFfmcVXRSxSxiSJ&#xA;1kjbdXUgg/IjFVlxd2luAbiaOEN9kyMFr8qkYqqRyRyIHjYOjbqymoI9iMVXYqtjljkHKNw46VUg&#xA;iv0Yq4ugYIWAZvsqTuaeAxVTkvbOKVYZZ40lanGNnUMa9KAmuKqrMqqWYgKNyTsBiqjLfWUKK8tx&#xA;HGj/AGGd1UGngSd8VVgQQCDUHcEYq3iqjNeWkMixzTxxyP8AYR2VSe2wJ3xVhGgR1/NzzPJX7Nrb&#xA;LT/WihP/ABrirN7i8tLen1ieOHl9n1HVa/KpGKqgdCgcMChFQwO1PGuKrDd2qhC0yAStwjJYfE38&#xA;q77nFVXFWHeZvN2pDX4PK/l6OOTV5l53NzNUxW0ZFeRUdW47/d1riqPj8q6m0X+l+YtRkuWHxSQm&#xA;CFAf8mNYyB9JOKrtC0/zZY6nPFqOpJqWkGOttI8ax3Cych8LcAqlaV3/AFYqnb3Nsiuzyoqx/wB4&#xA;xYALXb4q9MVbe5t44fWklRISARKzALQ9PiO2KtwzQzRiSGRZIz0dCGB+kYqtnuba3UPcSpCpNA0j&#xA;BRX5nFV6yxtGJFcNGRyDggrTxrirCHs9K8367q8OqPIbTRp47e0gWUxoJOPJ5WC05MW+EV7D54Vb&#xA;vLPS/N/mDWNM1OSRrDRhbxRQRyNGhlnVnaVuJHJgRwWuwofHAqafmMQPJGsEmg9AjfxLADFUb5P/&#xA;AOUS0T/mAtf+TK4qwvyhoGmaz5l81zajELq2g1KRIbWWpiEgZg8jJ9ljQAKT03wqraBp8Ohfmne6&#xA;Xpw9HTLywF0bQE8FkDqtVB6dD9+KpZ5W1KPWte1fXNV0u51do5zb6ekcSzQ28SmtAsjKAxHHen68&#xA;UJjpo1HSfNl7qGm6TdWPl2ezkmu7aVFjjW5iUtyRFZgOQUDbxxSrflnpdrrGkSeYtZiTUNT1CaSs&#xA;twok9ONGKiOMNUIvXpgVbHTy3+aFrpenD0tJ1u3aSWxX+6jmUOecadFr6fbxPtir0PFXnvliJfLP&#xA;5gan5fpw0/V1+vaYOwcV5xr8hy+hRiqbaLGurebdS8wSGtppwOmacT9klPiuZR2+2eAPgDiqTahb&#xA;/l5daLqEFhYNq06xyerfwW7zyerxJ5m8ZeNa7/b+imFVXQbu5u/yYnnuZGlm/Rt+hdjUlY/WRRX2&#xA;VQMCrfIfkfy7feTbGfU7RL24uoiWllqSiFm4pH/IAP5e++Kq/wCUbXEWk6npsspli03UJre3LGpC&#xA;KBsPatT9OKst12/fTtE1DUEXk9pbSzoprQtGhYA07VGKsM/LvyvpWpeXU1rWrePVNT1VpJZ57tFl&#xA;IAdkVU5Ahdlrt/AYqhPLUMWh+e/NyozSQWNnFJGHJYiNYldY6mpoi0UewwqhPIVxBe2VxresaNda&#xA;zqWoSvyuvQjmjWJTxEcfqOOIBrsB7YoTbyjZapZ6j5gtBYXFp5anjM2nw3ICiN2X94iKGagJY7e2&#xA;KUv/ACs8naNf+XdP1e/V7i8t7hpLImR1WD0ZuQCIpC7uORqDir1HArzTyqVj/N/zIlxtcSQ1h5dS&#xA;lYjt/seJ69MKvS8Csfs/NiXHnK+8s/VWR7O3Fz9aLghwRHsEpt/e+PbFWF+XPKum695s82rqgaay&#xA;hvfhtFdo1aRjJR3KFWJQVC79zhQynWYvI1rfWVtqiLdXUUCw2OmtHJdkRrUBlt0WTc9ORXtgSkPk&#xA;429t+ZerWWnW8un6ZNYi5NjIhiX1Q8a81i/ZFGOKp5qp8itrs6X8C6prDqoa19B714kCgBVjVJFi&#xA;B6mtOuKpN+WscLan5s0gQyR6THNGIdOuB/drOJRInEk0DBRtiql5D8uaDL5l80rJYQOtlfBLQFAf&#xA;SWr7J4dMKHeSfLmgyec/NSPYQMmn3FsbJSgpCf3h+D+XdRilmHnTR7vWfLF/ploUFzcoqxmQlVqH&#xA;VtyAewwKiPLOnXGm+XtO0+44me1t44pShqvJVoaE0xVKPJ3lrUtH1bzFdXZjMWqXrXNqEYsQheRv&#xA;iBAoaOMVbj8t6mPzEk8wMyHT2svqyLyPqB6g/ZpSmx74qgrbyz5h8t61fXvl9YL7S9Sk9a402dzA&#xA;8cpJNYpArrTfuPb3xVPtO/xHdXEkmrQ21rYNG0aWMbGeRmYj45JSqKBxBHFV79cVSTy7oPmHyoLj&#xA;T7GKLVNGkkaa0DS+jPCW6o3JWV19wcVV9K8r6nceam80a4Ykuo4vq+nWMBLrBGa1LSELyc8m6Cm5&#xA;xVlmKsS8/wDlXUtahsLvR5Ut9Z02b1LaZyVHBh8QqA3cA9MVTKPy1FF5Qby9DKYw1o9qbjqeciEP&#xA;IR/lMxY4qkGgaN52sfLg8ttbWUKIkkK6oJWcenITVhAEUs/xd2HviqvoPljXbLyBeeWrpbf6x9Xu&#xA;re1milZlc3HqEFwyJwAMnauKp15O0q90nyzYadelDc20ZSQxmq/aJFCQO1MVQHkLy5qWhWupxX3p&#xA;Fru+luomjJYlJAoAYkD+XFWRXlrBeWk9pOvOC4jaKVfFHUqw+44qxDy1pPnDyzZvo0Ftb6pp8bu1&#xA;hdNObdkRzy4yp6cn7RJ+HFV3lnyjrFj5o1rVNUlhuodUiRSUqKtQc04EbIu6rv064qp6HoHmrym0&#xA;1jpcUGraJJI0tvFLKbeeEt1UsVdWH+e2KsgsE8xzQXj6oLeJpk42lnAWcR7NUyTMF5FqjooAp3xV&#xA;B+QNAvtB8sW+mXxQ3MTyMxjJZaO5YUJA7HFWR4qxTzV5Jl1HU7bXdHuxp+vWYpHMRyjlXf4JAPYk&#xA;V8NqYqrQap57jQR3WhW08wG89veBImIHXjIhda/TiqF8v+W9ej84X/mbVDbw/XbcW6WUDNKU4mOh&#xA;MjIn+++w74qiPKnl3UtL1zzFeXXpm31S5We14MS3Gr15ggU+0MVQE/l/zHpvni88xaZBBqNtqMKx&#xA;SwSy+jJGUVR8LlXFPgriq6w8u+aofPDeY7gWckV3ai1uIEkkUwLzVvgJRvVICdTxrXtiqlpOgeav&#xA;L/mDWbixtbbUrLV5zcLLJOYJI2LM3F/gk5Ac+39mKonyr5c8x6T5l1i/vWtbi21cxyySxM6NG8Yf&#xA;4VjKtUVelS/Tf2xVC/l9/wApP5z/AOY8frkxV3kb/lN/O3/MRa/qlxVnWKuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxVjujebIJ7WKbUp4IGuzPJZRpy+K2gLn13JJ4qyJyBNB7k4qmEnmPRYqepdKpNv&#xA;9boQ1RDVQGIpUEmRQFO5r0xVbeeZtCs4mlubxI1WVrc1DE+olOShQCTxruQKYqhbvzGbe/1Lm8Ue&#xA;n2EcUXqSB6tezVcR8k5niEZKgJX4sVRr6/pEd/8Ao6W6QXyxmSSBatxVV5NUgUHw70O9MVX6frWl&#xA;6jaNd2dwstqm7T0KpTiHryYAbA7+HTqMVSHQPOz6pq08BjjWx9Z7e3mTkW5irRV6hhNEDIrbLTar&#xA;HFU48xapcadp6y2qJLeTTQ29rC9eLySyBafDuKAlifAYqorrsttrEmmaj6QVbRr5buMlVEaOEdXR&#xA;i3E1YUPI136Yqvk8zaXaabb3t/cJGtygliWJZHLIxAUqnH1CPjUV49T74q3dea/L1pePZ3N6kVxH&#xA;x9RGDALzrQlqcafDSteu3UjFV58y6INMTU2ugtnJzCOyuGJi5eoBGRz+Hg1fh2AriqldebvL1p6X&#xA;1m79J5oRcpGySc/TNNyoUkU5bjqO+Kog67p41ObTmZxNbxCa4kKMIY0apXnKRwFQpPXtiqGfzTpD&#xA;WNxc29wpEMgtlaVZURriQAxoDwLNy5j7IOKoqLXNKl1B9OjuA97GaSQqGPE8eXxECg26V+XUYqxP&#xA;8vWB8zecyDUfpADbxBkBxVryM6jz150T9pp7dh8lEgP68VZ5irsVdirsVdirsVdirsVdirsVdirs&#xA;VdiqXa5a6leWT2dlIkAuVaKe5YtzjRti0agUZuNaVIod8VQmo+TtFv4ooZ1kEMNsLOKNHKqIeSsV&#xA;p039NQf7BirtR8n6VqFyLi4ef1FWBE4ytQC2kMqbGvKrH4uVa/PfFVceWdJW+tbyNGSW0V1jAaoP&#xA;qOJGZi3JixcVLVqe9cVUf8JaaVkV5bh1lvP0hIplYAygllA48aKrGopvsN9sVVU8tafGNT9NpUbV&#xA;eZuHVgGUyLxbg1Kj2rWnbFUZJpli+mNpZiAsXhNsYFqo9Irw4inT4dsVSI+R4obm2v7C/mi1KzQQ&#xA;wXE6pOphUFRHIgERcAMQG5Bv8rFUfdaFcX0tncXl+63Nk7SQG1RI4w7IU5GOYXFTxYgVPfFW5vK+&#xA;mTW97FKZXk1BBFd3TOTM8YP92G6KnUcVAG574qoXXkvRbq9S8m9dpYjB6f716KLbl6ag/apyYt1r&#xA;XeuKqs/lTSp7mS6kDm4kn+stJUV9URelG24/3Un934HfriqFuvIWg3Npb2kvr/V7WAW0KCU0Cc1k&#xA;ata1LlQG9sVRd95W0u9mea4MrO/oBj6hqY7ZuaR8vtcefxtvUnvirV35U0u7F8Jmmb9JSRyXYEjA&#xA;MIuPFAv2QtIwDtUjviq2DyhpMNrBbK05hgumvgDK1WmYs1WYbmjNX54qmFlptrZy3U0QJmvJTNcS&#xA;MaszcQqiv8qqoCjFUFoflfT9GvNTu7V5Xl1Wc3NyJSpUOWZqJxVaD4z1rirWleV7DTNY1LVoJJnu&#xA;dUZWuFkKlBxJI4BVUj7XcnFX/9k=</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -62.1089 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 62.1089 li433.632 62.1089 li433.632 0 liclp[1 0 0 1 0 0 ] concat11.0269 15.523 mo11.0269 12.2671 10.9761 9.01026 10.875 5.75635 cv7.36817 5.75635 2.84522 5.94385 0 6.27491 cv0.151856 5.80323 0.253418 5.28467 0.253418 4.76612 cv0.253418 4.29297 0.151856 3.82178 0 3.30323 cv4.36963 3.44483 8.73975 3.53956 13.1104 3.53956 cv17.4805 3.53956 21.8511 3.44483 26.2212 3.30323 cv26.0689 3.82178 25.9668 4.29297 25.9668 4.81153 cv25.9668 5.28467 26.0689 5.80323 26.2212 6.27491 cv23.376 5.94385 18.8531 5.75635 15.3462 5.75635 cv15.2447 9.01026 15.1939 12.2671 15.1939 15.523 cv15.1939 23.6373 li15.1939 27.6939 15.398 31.7984 15.6011 35.857 cv14.7364 35.7154 13.9234 35.6207 13.1104 35.6207 cv12.2974 35.6207 11.4839 35.7154 10.6207 35.857 cv10.8238 31.7984 11.0269 27.6939 11.0269 23.6373 cv11.0269 15.523 lifalse sop/0 [/DeviceCMYK] add_csa0 0 0 0.6 cmykf29.2232 13.7286 mo29.2232 9.38819 29.1216 3.30323 28.8169 0.140626 cv29.5787 0.283692 30.3414 0.378418 31.1041 0.378418 cv31.8658 0.378418 32.628 0.283692 33.3907 0.140626 cv33.0855 3.30323 32.9839 9.38819 32.9839 13.4937 cv32.9839 17.0787 li33.0855 17.0787 li34.9654 14.3892 37.5572 12.8331 41.2164 12.8331 cv44.9766 12.8331 49.3472 14.5308 49.3472 21.0425 cv49.3472 23.732 49.1441 26.5621 49.1441 29.7701 cv49.1441 31.8462 49.1441 33.8277 49.2452 35.857 cv48.4834 35.7154 47.8228 35.6207 47.1109 35.6207 cv46.4 35.6207 45.7393 35.7154 45.0279 35.857 cv45.1294 32.4117 45.3829 28.9693 45.3829 25.3355 cv45.3829 22.4566 li45.3829 17.8335 43.1978 15.2867 39.8438 15.2867 cv35.1187 15.2867 32.9839 18.1177 32.9839 23.024 cv32.9839 26.6089 33.0855 32.6958 33.3907 35.857 cv32.628 35.7154 31.8658 35.6207 31.1041 35.6207 cv30.3414 35.6207 29.5787 35.7154 28.8169 35.857 cv29.1216 32.6958 29.2232 26.6089 29.2232 22.2691 cv29.2232 13.7286 lif54.9874 25.2408 mo54.9874 31.5152 60.0191 36.3287 67.3365 36.3287 cv70.4869 36.3287 73.7906 34.9595 75.8228 33.4498 cv76.128 31.1382 li75.8736 30.9966 li74.0948 32.8853 70.9444 34.3462 68.2515 34.3462 cv62.6109 34.3462 59.4595 30.525 59.4595 25.6187 cv59.4595 25.1949 59.4595 24.7691 59.5108 24.2974 cv61.7461 24.2505 63.9317 24.1558 66.167 24.1558 cv69.7759 24.1558 73.3838 24.2505 77.042 24.2974 cv77.0933 23.6841 77.1441 23.0708 77.1441 22.4566 cv77.1441 17.2203 73.7393 12.8331 66.6246 12.8331 cv59.1544 12.8331 54.9874 17.5992 54.9874 25.2408 cvcp66.7266 14.3423 mo72.0118 14.3423 72.9766 19.1548 72.9766 22.5054 cv70.8423 22.5513 68.4546 22.6451 66.2183 22.6451 cv64.0845 22.6451 61.6958 22.5513 59.6119 22.5054 cv59.8663 19.108 61.7461 14.3423 66.7266 14.3423 cvf80.396 24.5816 mo80.396 33.1675 86.8502 36.3287 92.7447 36.3287 cv98.6392 36.3287 105.094 33.1675 105.094 24.5816 cv105.094 15.9937 98.6392 12.8331 92.7447 12.8331 cv86.8502 12.8331 80.396 15.9937 80.396 24.5816 cvcp84.8687 24.5816 mo84.8687 19.2974 86.7486 14.3423 92.7447 14.3423 cv98.7413 14.3423 100.622 19.2974 100.622 24.5816 cv100.622 29.8648 98.7413 34.8179 92.7447 34.8179 cv86.7486 34.8179 84.8687 29.8648 84.8687 24.5816 cvf122.066 13.3047 mo122.931 13.4463 123.744 13.5411 124.607 13.5411 cv125.37 13.5411 126.081 13.4463 126.844 13.3047 cv128.927 19.439 131.469 25.524 134.415 31.7046 cv137.159 26.5621 139.801 19.439 142.19 13.3047 cv142.698 13.4463 143.258 13.5411 143.766 13.5411 cv144.324 13.5411 144.833 13.4463 145.341 13.3047 cv141.733 20.8531 138.023 28.356 135.126 35.857 cv134.619 35.7154 134.06 35.6207 133.551 35.6207 cv132.993 35.6207 132.484 35.7154 131.925 35.857 cv128.825 28.356 125.776 20.8531 122.066 13.3047 cvf149.563 18.023 mo150.122 18.023 li151.291 15.9937 153.832 14.815 156.524 14.815 cv160.59 14.815 162.115 17.5992 162.115 20.7584 cv162.115 22.6001 161.86 22.9761 154.492 24.0611 cv150.071 24.7222 147.326 26.7505 147.326 30.525 cv147.326 34.1119 150.681 36.3287 154.085 36.3287 cv157.541 36.3287 159.625 35.149 162.063 32.8853 cv162.267 34.4888 163.385 35.8101 165.57 35.8101 cv166.892 35.8101 168.111 35.4312 168.822 35.149 cv168.822 34.1119 li168.466 34.2994 168.06 34.2994 167.755 34.2994 cv165.773 34.2994 165.773 32.3648 165.773 30.8091 cv165.773 26.8453 165.977 23.3531 165.977 19.816 cv165.977 15.6158 162.622 12.8331 157.744 12.8331 cv155.051 12.8331 152.612 13.4463 149.563 15.5689 cv149.563 18.023 licp161.911 31.0455 mo160.742 32.7906 158.506 34.3462 155.915 34.3462 cv153.679 34.3462 151.494 32.8365 151.494 29.8648 cv151.494 24.7222 158.608 25.0533 162.115 23.9664 cv161.911 31.0455 lif185.491 15.2867 mo180.764 15.2867 178.63 18.1177 178.63 23.024 cv178.63 27.0347 li178.63 29.8648 178.732 33.1675 179.037 35.857 cv178.274 35.7154 177.512 35.6207 176.75 35.6207 cv175.988 35.6207 175.225 35.7154 174.463 35.857 cv174.768 33.1675 174.87 29.8648 174.87 27.0347 cv174.87 22.1265 li174.87 19.2974 174.768 15.9937 174.463 13.3047 cv175.225 13.4463 175.988 13.5411 176.75 13.5411 cv177.258 13.5411 178.02 13.4463 178.782 13.3047 cv178.681 14.5787 178.63 15.8052 178.63 17.0787 cv178.732 17.0787 li180.612 14.3892 183.203 12.8331 186.863 12.8331 cv190.622 12.8331 194.993 14.5308 194.993 21.0425 cv194.993 23.732 194.79 26.5621 194.79 29.7701 cv194.79 31.8462 194.79 33.8277 194.892 35.857 cv194.129 35.7154 193.468 35.6207 192.757 35.6207 cv192.046 35.6207 191.385 35.7154 190.674 35.857 cv190.775 32.4117 191.03 28.9693 191.03 25.3355 cv191.03 22.4566 li191.03 17.8335 188.844 15.2867 185.491 15.2867 cvf233.971 35.857 mo234.682 35.7623 235.291 35.6207 235.901 35.6207 cv236.512 35.6207 237.12 35.7623 237.883 35.857 cv237.832 32.0826 237.73 28.8267 237.73 24.5328 cv237.73 16.4654 237.883 4.10401 238.342 0.140626 cv237.477 0.234864 236.764 0.378418 236.053 0.378418 cv235.342 0.378418 234.578 0.234864 233.767 0.140626 cv233.971 4.19825 233.971 11.6065 233.971 17.5503 cv233.869 17.5503 li232.445 14.4839 229.803 12.8331 226.042 12.8331 cv220.757 12.8331 215.117 16.7017 215.117 24.7222 cv215.117 32.8365 220.301 36.3287 225.434 36.3287 cv230.413 36.3287 233.005 33.2144 234.021 31.233 cv234.122 31.233 li233.971 35.857 licp219.59 25.0054 mo219.59 19.2974 221.876 14.815 226.755 14.815 cv231.582 14.815 234.173 18.1636 234.173 24.1089 cv234.173 29.2515 231.886 34.5835 226.602 34.5835 cv223.299 34.5835 219.59 32.5542 219.59 25.0054 cvf243.015 25.2408 mo243.015 31.5152 248.046 36.3287 255.363 36.3287 cv258.514 36.3287 261.816 34.9595 263.851 33.4498 cv264.156 31.1382 li263.901 30.9966 li262.122 32.8853 258.971 34.3462 256.278 34.3462 cv250.638 34.3462 247.486 30.525 247.486 25.6187 cv247.486 25.1949 247.486 24.7691 247.537 24.2974 cv249.773 24.2505 251.959 24.1558 254.195 24.1558 cv257.803 24.1558 261.411 24.2505 265.07 24.2974 cv265.121 23.6841 265.172 23.0708 265.172 22.4566 cv265.172 17.2203 261.767 12.8331 254.651 12.8331 cv247.184 12.8331 243.015 17.5992 243.015 25.2408 cvcp254.755 14.3423 mo260.039 14.3423 261.005 19.1548 261.005 22.5054 cv258.869 22.5513 256.481 22.6451 254.246 22.6451 cv252.112 22.6451 249.723 22.5513 247.64 22.5054 cv247.893 19.108 249.773 14.3423 254.755 14.3423 cvf282.145 17.1734 mo281.789 16.7964 280.672 16.4185 279.654 16.4185 cv276.401 16.4185 274.471 19.2974 274.471 22.9761 cv274.471 31.1851 274.471 33.6861 274.674 35.857 cv274.014 35.7154 273.303 35.6207 272.642 35.6207 cv271.93 35.6207 271.271 35.7154 270.507 35.857 cv270.711 33.5445 270.711 29.8648 270.711 24.5816 cv270.711 23.0708 li270.711 20.6168 270.711 17.3628 270.507 13.3047 cv271.271 13.4463 271.93 13.5411 272.642 13.5411 cv273.303 13.5411 274.014 13.4463 274.674 13.3047 cv274.42 15.5689 274.42 16.7017 274.42 17.8814 cv274.522 17.9283 li276.452 14.5308 278.893 12.8331 281.23 12.8331 cv281.84 12.8331 282.195 12.8804 282.855 13.1153 cv282.5 13.8707 282.5 15.6626 282.5 16.9371 cv282.145 17.1734 lif331.792 9.05909 mo329.709 6.7461 325.745 4.43506 320.612 4.43506 cv312.177 4.43506 305.723 9.1045 305.723 19.5796 cv305.723 28.8267 311.314 34.4888 320.867 34.4888 cv323.764 34.4888 327.269 33.9683 328.998 32.9781 cv329.048 31.0914 329.099 29.2037 329.099 27.2691 cv329.099 25.0533 328.947 22.7876 328.846 20.8062 cv329.505 20.9478 330.471 21.0425 331.284 21.0425 cv332.046 21.0425 332.81 20.9947 333.469 20.8062 cv333.367 22.2212 333.266 25.2896 333.266 30.3834 cv333.266 31.6099 333.316 32.9312 333.316 34.2046 cv330.42 35.149 324.323 36.4703 320.359 36.4703 cv308.264 36.4703 300.743 30.6197 300.743 19.5796 cv300.743 8.86963 308.569 2.68995 320.612 2.68995 cv327.475 2.68995 331.182 4.24561 333.571 5.42481 cv333.062 6.27491 332.555 7.87794 332.403 9.05909 cv331.792 9.05909 lif352.73 17.1734 mo352.374 16.7964 351.255 16.4185 350.238 16.4185 cv346.986 16.4185 345.055 19.2974 345.055 22.9761 cv345.055 31.1851 345.055 33.6861 345.259 35.857 cv344.599 35.7154 343.888 35.6207 343.226 35.6207 cv342.516 35.6207 341.854 35.7154 341.092 35.857 cv341.296 33.5445 341.296 29.8648 341.296 24.5816 cv341.296 23.0708 li341.296 20.6168 341.296 17.3628 341.092 13.3047 cv341.854 13.4463 342.516 13.5411 343.226 13.5411 cv343.888 13.5411 344.599 13.4463 345.259 13.3047 cv345.005 15.5689 345.005 16.7017 345.005 17.8814 cv345.105 17.9283 li347.038 14.5308 349.477 12.8331 351.814 12.8331 cv352.424 12.8331 352.779 12.8804 353.44 13.1153 cv353.085 13.8707 353.085 15.6626 353.085 16.9371 cv352.73 17.1734 lif357.914 18.023 mo358.472 18.023 li359.642 15.9937 362.183 14.815 364.875 14.815 cv368.941 14.815 370.465 17.5992 370.465 20.7584 cv370.465 22.6001 370.212 22.9761 362.844 24.0611 cv358.422 24.7222 355.678 26.7505 355.678 30.525 cv355.678 34.1119 359.031 36.3287 362.438 36.3287 cv365.894 36.3287 367.977 35.149 370.414 32.8853 cv370.618 34.4888 371.735 35.8101 373.921 35.8101 cv375.242 35.8101 376.463 35.4312 377.174 35.149 cv377.174 34.1119 li376.818 34.2994 376.412 34.2994 376.106 34.2994 cv374.123 34.2994 374.123 32.3648 374.123 30.8091 cv374.123 26.8453 374.327 23.3531 374.327 19.816 cv374.327 15.6158 370.974 12.8331 366.096 12.8331 cv363.401 12.8331 360.963 13.4463 357.914 15.5689 cv357.914 18.023 licp370.263 31.0455 mo369.094 32.7906 366.857 34.3462 364.266 34.3462 cv362.029 34.3462 359.844 32.8365 359.844 29.8648 cv359.844 24.7222 366.958 25.0533 370.465 23.9664 cv370.263 31.0455 lif383.322 18.023 mo383.881 18.023 li385.05 15.9937 387.591 14.815 390.284 14.815 cv394.35 14.815 395.873 17.5992 395.873 20.7584 cv395.873 22.6001 395.62 22.9761 388.252 24.0611 cv383.83 24.7222 381.086 26.7505 381.086 30.525 cv381.086 34.1119 384.439 36.3287 387.846 36.3287 cv391.302 36.3287 393.385 35.149 395.823 32.8853 cv396.026 34.4888 397.146 35.8101 399.329 35.8101 cv400.652 35.8101 401.871 35.4312 402.582 35.149 cv402.582 34.1119 li402.227 34.2994 401.82 34.2994 401.516 34.2994 cv399.533 34.2994 399.533 32.3648 399.533 30.8091 cv399.533 26.8453 399.737 23.3531 399.737 19.816 cv399.737 15.6158 396.382 12.8331 391.504 12.8331 cv388.811 12.8331 386.373 13.4463 383.322 15.5689 cv383.322 18.023 licp395.671 31.0455 mo394.502 32.7906 392.266 34.3462 389.674 34.3462 cv387.438 34.3462 385.254 32.8365 385.254 29.8648 cv385.254 24.7222 392.366 25.0533 395.873 23.9664 cv395.671 31.0455 lif418.996 4.05811 mo418.183 3.58545 417.217 3.3501 416.201 3.3501 cv413.203 3.3501 412.033 5.61426 412.033 8.06739 cv412.033 9.19922 412.339 11.6539 412.644 13.5884 cv414.373 13.5884 416.15 13.5396 417.878 13.5411 cv417.827 13.8707 417.776 14.2017 417.776 14.4839 cv417.776 14.815 417.827 15.1441 417.878 15.4283 cv416.15 15.3804 414.373 15.2867 412.644 15.2867 cv412.644 22.1265 412.644 52.0923 412.846 59.0269 cv412.137 58.8853 411.373 58.7906 410.662 58.7906 cv409.951 58.7906 409.189 58.8853 408.426 59.0269 cv408.883 52.0923 408.883 22.1744 408.883 15.2867 cv407.664 15.2867 406.444 15.3804 405.224 15.4283 cv405.274 15.1441 405.325 14.815 405.325 14.4839 cv405.325 14.2017 405.274 13.8707 405.224 13.5396 cv406.444 13.5396 407.715 13.5884 408.883 13.5884 cv408.883 9.90723 410.611 4.67139 413.305 2.16944 cv414.524 1.0376 416.557 0 418.487 0 cv418.793 0 419.199 0.0458985 419.504 0.140626 cv419.453 1.41602 419.302 2.68995 419.302 3.91651 cv418.996 4.05811 lif433.123 4.05811 mo432.311 3.58545 431.345 3.3501 430.327 3.3501 cv427.331 3.3501 426.162 5.61426 426.162 8.06739 cv426.162 9.19922 426.467 11.6539 426.772 13.5884 cv428.499 13.5884 430.276 13.5396 432.004 13.5411 cv431.953 13.8707 431.903 14.2017 431.903 14.4839 cv431.903 14.815 431.953 15.1441 432.004 15.4283 cv430.276 15.3804 428.499 15.2867 426.772 15.2867 cv426.772 22.1265 426.772 52.0923 426.974 59.0269 cv426.263 58.8853 425.501 58.7906 424.788 58.7906 cv424.077 58.7906 423.315 58.8853 422.554 59.0269 cv423.011 52.0923 423.011 22.1744 423.011 15.2867 cv421.791 15.2867 420.572 15.3804 419.353 15.4283 cv419.402 15.1441 419.453 14.815 419.453 14.4839 cv419.453 14.2017 419.402 13.8707 419.353 13.5396 cv420.572 13.5396 421.841 13.5884 423.011 13.5884 cv423.011 9.90723 424.738 4.67139 427.433 2.16944 cv428.652 1.0376 430.683 0 432.615 0 cv432.919 0 433.325 0.0458985 433.632 0.140626 cv433.581 1.41602 433.428 2.68995 433.428 3.91651 cv433.123 4.05811 lif191.531 49.2603 mo192.149 47.5757 192.216 47.2896 191.023 47.1285 cv190.472 47.0562 li190.339 46.9126 190.361 46.6978 190.604 46.6265 cv191.509 46.6617 192.237 46.6802 193.187 46.6802 cv194.092 46.6802 194.776 46.6617 195.659 46.6265 cv195.813 46.6978 195.858 46.9664 195.659 47.0562 cv195.063 47.1285 li193.981 47.2535 193.849 47.4859 193.187 49.2603 cv190.052 57.4498 li189.699 58.3824 189.279 59.2779 188.661 60.1207 cv187.734 61.3931 186.365 62.1089 184.621 62.1089 cv183.959 62.1089 183.23 61.9839 183.23 61.5904 cv183.23 61.3033 183.628 60.8199 184.091 60.8199 cv184.4 60.8199 184.644 60.9449 184.908 61.0699 cv185.327 61.2671 185.593 61.3384 185.968 61.3384 cv186.563 61.3384 187.005 60.6402 187.402 59.7798 cv187.579 59.4214 188.153 58.1128 188.859 56.2671 cv191.531 49.2603 lif197.182 56.9664 mo196.982 57.396 197.093 57.5757 197.336 57.5757 cv197.667 57.5757 198.55 57.0025 199.698 56.0884 cv201.707 54.4752 202.854 52.396 203.584 51.3033 cv204.047 51.232 204.577 51.4107 204.665 51.6255 cv204.444 52.1099 203.01 55.0494 202.082 57.1812 cv201.972 57.4146 201.949 57.6294 202.17 57.6294 cv202.591 57.6294 203.76 56.7876 204.334 56.231 cv204.533 56.1958 204.709 56.2671 204.731 56.482 cv204.157 57.3423 202.038 58.7584 200.868 58.7584 cv200.515 58.7584 200.184 58.4175 200.316 58.1314 cv201.817 54.8521 li201.772 54.8335 li200.184 56.4644 197.446 58.7584 196.254 58.7584 cv195.349 58.7584 195.238 58.023 195.614 57.2349 cv197.645 52.8804 li197.8 52.5396 197.821 52.3609 197.645 52.3609 cv197.225 52.3609 196.077 53.15 195.547 53.5972 cv195.326 53.6334 195.15 53.4898 195.172 53.3287 cv195.746 52.6119 197.954 51.1958 198.991 51.1958 cv199.278 51.1958 199.786 51.4283 199.653 51.7339 cv197.182 56.9664 lif210.025 52.899 mo210.224 52.4859 210.269 52.2349 209.959 52.2349 cv209.518 52.2349 208.59 52.8443 207.928 53.4898 cv207.73 53.4898 207.575 53.3287 207.598 53.1851 cv208.281 52.3785 209.716 51.1958 211.086 51.1958 cv211.593 51.1958 212.057 51.7154 211.747 52.3785 cv210.004 56.1236 li209.694 56.7691 209.583 57.1451 209.583 57.396 cv209.583 57.6119 209.694 57.8267 210.069 57.8267 cv211.063 57.8267 212.763 56.0523 213.536 55.1031 cv214.396 54.0455 214.859 52.6656 214.971 52.2349 cv215.125 51.6441 215.61 51.2671 216.008 51.2671 cv216.538 51.2671 216.671 51.608 216.671 51.7691 cv216.671 52.146 216.428 52.4859 215.897 53.3824 cv215.103 54.7085 214.705 56.0699 214.705 57.0386 cv214.705 57.5757 214.992 57.8267 215.522 57.8267 cv216.185 57.8267 217.354 57.1636 218.261 56.106 cv219.121 55.1031 219.629 54.0093 219.629 53.1138 cv219.629 52.6832 219.584 52.2535 219.43 51.8414 cv219.475 51.4644 219.827 51.1958 220.247 51.1958 cv220.953 51.1958 221.108 51.8589 221.108 52.3072 cv221.108 53.3101 220.401 54.9058 218.702 56.5718 cv217.112 58.1314 215.368 58.7584 214.485 58.7584 cv214.022 58.7584 213.249 58.2925 213.249 57.7369 cv213.249 57.2525 213.447 56.6792 213.624 56.2134 cv213.734 55.9273 213.58 55.9449 213.314 56.231 cv212.277 57.3785 210.445 58.7584 209.12 58.7584 cv208.502 58.7584 207.995 58.2203 207.995 57.7906 cv207.995 57.4498 208.149 56.9849 208.369 56.482 cv210.025 52.899 lif228.766 51.1958 mo228.125 51.1958 227.265 51.3394 226.116 52.0562 cv223.709 53.5611 222.827 55.7476 222.827 56.8765 cv222.827 57.7554 223.29 58.7584 224.615 58.7584 cv225.542 58.7584 226.8 58.4712 228.146 57.1275 cv228.19 56.9664 228.059 56.8228 227.86 56.8228 cv226.889 57.5035 226.337 57.8628 225.542 57.8628 cv224.945 57.8628 224.482 57.4498 224.482 56.8414 cv224.482 56.1236 224.637 55.5503 224.791 55.2457 cv227.971 54.5289 230.156 53.6334 230.156 52.271 cv230.156 51.8052 229.648 51.1958 228.766 51.1958 cvcp228.323 51.7515 mo228.721 51.7515 228.831 51.9849 228.831 52.1636 cv228.831 52.3248 228.655 52.8628 227.971 53.3824 cv227.154 54.0093 226.47 54.3502 225.013 54.7085 cv225.277 54.188 225.785 53.3638 226.646 52.6119 cv227.44 51.9126 228.015 51.7515 228.323 51.7515 cvf233.596 57.3423 mo233.42 57.7554 233.441 57.9341 233.685 57.9341 cv234.17 57.9341 235.208 57.0562 236.223 56.1236 cv236.443 56.106 236.576 56.1958 236.576 56.3746 cv236.003 57.271 234.612 58.7584 232.779 58.7584 cv232.116 58.7584 231.919 58.5074 231.919 58.2203 cv231.919 57.9341 232.028 57.6119 232.403 56.6978 cv235.914 48.2212 li236.443 46.9664 236.223 46.7876 235.892 46.6617 cv235.494 46.5181 li235.384 46.4468 235.384 46.2857 235.494 46.232 cv235.892 46.107 237.261 45.7662 238.276 45.6939 cv238.386 45.8023 li238.1 46.4468 237.879 46.9488 237.084 48.8843 cv233.596 57.3423 lif244.476 47.5757 mo244.476 48.1314 243.989 48.7046 243.305 48.7046 cv242.731 48.7046 242.51 48.3462 242.51 48.024 cv242.51 47.6294 242.842 46.8951 243.702 46.8951 cv244.211 46.8951 244.476 47.1822 244.476 47.5757 cvcp241.649 52.6832 mo241.76 52.4859 241.76 52.3423 241.605 52.3423 cv241.451 52.3423 240.877 52.5582 239.773 53.2925 cv239.575 53.275 239.442 53.1314 239.486 52.9878 cv240.7 51.8589 242.4 51.1958 243.129 51.1958 cv243.283 51.1958 243.394 51.3033 243.482 51.3746 cv243.615 51.483 243.615 51.6441 243.35 52.1636 cv240.723 57.2525 li240.635 57.4322 240.611 57.647 240.789 57.647 cv241.164 57.647 242.334 57.0201 243.085 56.3208 cv243.305 56.3394 243.416 56.4644 243.416 56.6255 cv243.085 57.1451 240.811 58.7584 239.288 58.7584 cv239.178 58.7584 239.045 58.7046 238.935 58.5972 cv238.802 58.4712 238.736 58.3101 238.846 58.1128 cv241.649 52.6832 lif252.132 51.1958 mo251.492 51.1958 250.631 51.3394 249.483 52.0562 cv247.076 53.5611 246.193 55.7476 246.193 56.8765 cv246.193 57.7554 246.657 58.7584 247.982 58.7584 cv248.909 58.7584 250.168 58.4712 251.515 57.1275 cv251.558 56.9664 251.426 56.8228 251.228 56.8228 cv250.255 57.5035 249.703 57.8628 248.909 57.8628 cv248.313 57.8628 247.85 57.4498 247.85 56.8414 cv247.85 56.1236 248.004 55.5503 248.158 55.2457 cv251.337 54.5289 253.523 53.6334 253.523 52.271 cv253.523 51.8052 253.016 51.1958 252.132 51.1958 cvcp251.69 51.7515 mo252.088 51.7515 252.198 51.9849 252.198 52.1636 cv252.198 52.3248 252.022 52.8628 251.337 53.3824 cv250.521 54.0093 249.836 54.3502 248.38 54.7085 cv248.645 54.188 249.151 53.3638 250.013 52.6119 cv250.808 51.9126 251.382 51.7515 251.69 51.7515 cvf258.928 52.899 mo257.979 55.1558 li258.089 55.1558 li258.751 54.1529 259.833 52.7193 260.406 52.1285 cv260.915 51.5904 261.467 51.1958 262.019 51.1958 cv262.791 51.1958 262.902 51.8052 262.902 52.0738 cv262.902 52.3423 262.703 52.8628 262.438 53.15 cv262.173 53.4175 261.82 53.4361 261.731 53.0601 cv261.621 52.5933 261.488 52.3609 261.269 52.3609 cv261.069 52.3609 260.826 52.5396 260.495 52.899 cv259.148 54.2964 257.912 56.482 256.742 58.5435 cv256.653 58.6871 256.544 58.7584 256.366 58.7584 cv256.124 58.7584 255.484 58.6871 255.639 58.2925 cv255.925 57.5757 257.315 54.4039 257.912 52.647 cv257.979 52.4507 257.935 52.271 257.735 52.271 cv257.161 52.271 256.565 52.773 256.168 53.2027 cv255.947 53.2388 255.793 53.1314 255.814 52.9166 cv256.521 51.9488 257.36 51.1958 258.42 51.1958 cv259.524 51.1958 259.127 52.4146 258.928 52.899 cvf271.498 54.917 mo271.498 53.7085 272.293 52.6626 273.618 52.1275 cv274.854 54.0337 275.827 55.2193 277.622 57.0547 cv276.827 57.5669 276.032 57.8218 275.121 57.8218 cv273.089 57.8218 271.498 56.543 271.498 54.917 cvcp289.189 59.2632 mo288.043 59.7046 287.276 59.8912 286.365 59.8912 cv283.89 59.8912 281.36 58.4029 279.477 56.3814 cv280.771 55.3589 281.86 53.546 281.86 52.4068 cv281.86 51.6626 281.155 51.1285 280.214 51.1285 cv279.683 51.1285 279.27 51.2212 278.712 51.4537 cv278.947 51.7095 li279.27 51.6626 279.418 51.6392 279.622 51.6392 cv280.418 51.6392 280.771 51.9878 280.771 52.7554 cv280.771 53.7544 280.094 54.939 278.947 55.939 cv277.828 54.917 275.827 52.4532 275.325 51.4537 cv278.418 50.4078 279.652 49.501 279.652 48.2925 cv279.652 47.1309 278.387 46.2701 276.709 46.2701 cv274.414 46.2701 272.707 47.6412 272.707 49.5245 cv272.707 50.2217 272.885 50.8726 273.385 51.7095 cv270.852 52.6387 269.498 54.0572 269.498 55.4742 cv269.498 57.2642 271.589 58.8213 273.975 58.8213 cv275.444 58.8213 276.68 58.4258 278.094 57.5196 cv279.976 59.4712 282.45 60.8204 285.186 60.8204 cv286.6 60.8204 287.661 60.5176 289.071 59.7046 cv289.189 59.2632 licp274.327 48.7339 mo274.327 47.7584 275.121 47.0142 276.18 47.0142 cv277.179 47.0142 277.945 47.6187 277.945 48.3853 cv277.945 49.2916 277.209 50.3375 275.032 51.0577 cv274.561 50.2911 274.327 49.4786 274.327 48.7339 cvf292.898 55.9273 mo292.214 57.7554 291.971 57.9703 290.956 58.0591 cv290.382 58.1128 li290.228 58.2203 290.228 58.4712 290.404 58.5611 cv291.177 58.525 291.928 58.5074 292.833 58.5074 cv294.135 58.5074 294.93 58.5611 295.592 58.5611 cv297.601 58.5611 300.471 58.3287 302.966 56.9488 cv305.062 55.7837 306.453 53.8482 306.453 51.5181 cv306.453 49.2427 304.864 46.6265 298.507 46.6265 cv296.651 46.6265 294.731 46.7691 294.399 46.8052 cv294.245 46.8951 294.267 47.1636 294.399 47.2359 cv295.283 47.3257 li295.924 47.397 296.078 47.5582 295.658 48.6695 cv292.898 55.9273 licp297.623 47.8804 mo297.844 47.3072 297.977 47.1822 298.661 47.1822 cv304.157 47.1822 304.489 49.9419 304.489 51.6441 cv304.489 53.5796 302.723 57.9341 296.343 57.9341 cv294.399 57.9341 293.937 57.522 294.334 56.4644 cv297.623 47.8804 lif308.812 58.1128 mo308.702 58.3101 308.768 58.4712 308.9 58.5972 cv309.011 58.7046 309.143 58.7584 309.254 58.7584 cv310.776 58.7584 313.051 57.1451 313.382 56.6255 cv313.382 56.4644 313.271 56.3394 313.051 56.3208 cv312.3 57.0201 311.13 57.647 310.755 57.647 cv310.578 57.647 310.601 57.4322 310.688 57.2525 cv313.315 52.1636 li313.581 51.6441 313.581 51.483 313.448 51.3746 cv313.359 51.3033 313.249 51.1958 313.095 51.1958 cv312.366 51.1958 310.666 51.8589 309.452 52.9878 cv309.408 53.1314 309.54 53.275 309.738 53.2925 cv310.844 52.5582 311.417 52.3423 311.571 52.3423 cv311.726 52.3423 311.726 52.4859 311.615 52.6832 cv308.812 58.1128 licp313.668 46.8951 mo312.808 46.8951 312.477 47.6294 312.477 48.024 cv312.477 48.3462 312.697 48.7046 313.271 48.7046 cv313.956 48.7046 314.441 48.1314 314.441 47.5757 cv314.441 47.1822 314.177 46.8951 313.668 46.8951 cvf323.444 51.9312 mo323.335 51.7515 323.092 51.5904 323.003 51.5542 cv322.87 51.5005 322.716 51.4468 322.473 51.4468 cv321.899 51.4468 321.348 51.5718 320.487 51.9664 cv319.581 52.3785 318.632 53.0953 317.572 54.2779 cv316.115 55.9087 315.63 57.3423 315.63 57.7554 cv315.63 58.2564 315.982 58.7584 316.602 58.7584 cv317.639 58.7584 319.891 57.522 321.458 55.9449 cv321.523 55.9634 li320.796 57.5757 li320.619 57.9878 320.574 58.149 320.574 58.274 cv320.574 58.4175 320.707 58.7584 321.215 58.7584 cv322.43 58.7584 323.997 57.7554 324.924 56.7515 cv324.924 56.608 324.77 56.5181 324.614 56.5181 cv323.356 57.4146 322.716 57.7193 322.341 57.7193 cv322.164 57.7193 322.054 57.6119 322.187 57.3072 cv322.893 55.6763 324.814 51.7154 325.145 51.0523 cv325.012 50.8199 324.438 50.6402 324.062 50.7837 cv323.444 51.9312 licp321.789 52.1285 mo322.362 52.1285 322.738 52.4322 322.893 52.773 cv322.54 53.8306 321.612 55.3716 319.935 56.6441 cv318.676 57.5757 318.014 57.8091 317.793 57.8091 cv317.594 57.8091 317.462 57.6832 317.462 57.4683 cv317.462 56.1958 318.809 53.8482 320.222 52.8267 cv320.906 52.3248 321.259 52.1285 321.789 52.1285 cvf336.312 53.5259 mo335.473 55.1744 li335.538 55.2095 li337.658 52.4683 339.335 51.1958 340.793 51.1958 cv341.631 51.1958 342.028 51.5718 342.028 52.1636 cv342.028 52.4507 341.874 53.0064 341.676 53.4175 cv341.278 54.314 339.688 57.2349 339.622 57.3785 cv339.534 57.5582 339.513 57.7193 339.667 57.7193 cv340.043 57.7193 341.102 57.1275 341.742 56.5005 cv342.051 56.4644 342.096 56.608 342.096 56.7515 cv341.256 57.898 339.513 58.7584 338.299 58.7584 cv338.1 58.7584 337.769 58.525 337.769 58.3101 cv337.769 58.149 337.834 58.023 338.299 57.1275 cv338.762 56.2496 339.646 54.5113 340.086 53.5972 cv340.241 53.275 340.55 52.647 340.55 52.2886 cv340.55 52.0738 340.527 51.8589 340.197 51.8589 cv339.557 51.8589 338.496 52.773 337.305 54.0093 cv336.179 55.1558 335.186 56.5718 333.839 58.5435 cv333.729 58.6871 333.64 58.7584 333.441 58.7584 cv333.198 58.7584 332.603 58.7046 332.801 58.2925 cv334.986 53.5972 li335.075 53.4 335.958 51.8589 335.163 51.8589 cv334.545 51.8589 333.309 52.7906 332.095 54.0093 cv330.946 55.1744 330.064 56.5718 328.782 58.5435 cv328.673 58.7046 328.584 58.7584 328.385 58.7584 cv328.144 58.7584 327.547 58.7046 327.746 58.2925 cv327.812 58.149 330.174 52.9166 330.262 52.647 cv330.372 52.3423 330.351 52.146 330.107 52.146 cv329.379 52.146 328.606 52.6832 328.165 53.1314 cv327.944 53.1314 327.833 53.0064 327.855 52.8628 cv328.408 52.0025 329.577 51.1958 331.256 51.1958 cv331.763 51.1958 331.984 51.5181 331.786 51.9312 cv330.262 55.1744 li330.328 55.2095 li331.917 53.0953 333.993 51.1958 335.671 51.1958 cv337.261 51.1958 336.752 52.6119 336.312 53.5259 cvf352.113 51.9312 mo352.003 51.7515 351.761 51.5904 351.672 51.5542 cv351.54 51.5005 351.386 51.4468 351.143 51.4468 cv350.568 51.4468 350.017 51.5718 349.155 51.9664 cv348.251 52.3785 347.302 53.0953 346.241 54.2779 cv344.784 55.9087 344.298 57.3423 344.298 57.7554 cv344.298 58.2564 344.651 58.7584 345.271 58.7584 cv346.308 58.7584 348.56 57.522 350.127 55.9449 cv350.193 55.9634 li349.465 57.5757 li349.287 57.9878 349.244 58.149 349.244 58.274 cv349.244 58.4175 349.376 58.7584 349.884 58.7584 cv351.099 58.7584 352.665 57.7554 353.593 56.7515 cv353.593 56.608 353.438 56.5181 353.284 56.5181 cv352.025 57.4146 351.386 57.7193 351.01 57.7193 cv350.834 57.7193 350.723 57.6119 350.855 57.3072 cv351.562 55.6763 353.482 51.7154 353.814 51.0523 cv353.682 50.8199 353.107 50.6402 352.732 50.7837 cv352.113 51.9312 licp350.458 52.1285 mo351.031 52.1285 351.407 52.4322 351.562 52.773 cv351.208 53.8306 350.281 55.3716 348.604 56.6441 cv347.345 57.5757 346.683 57.8091 346.462 57.8091 cv346.264 57.8091 346.131 57.6832 346.131 57.4683 cv346.131 56.1958 347.478 53.8482 348.89 52.8267 cv349.574 52.3248 349.928 52.1285 350.458 52.1285 cvf358.953 55.0669 mo359.02 55.1031 li360.587 53.1675 362.772 51.1958 364.429 51.1958 cv365.289 51.1958 365.665 51.5718 365.665 52.1636 cv365.665 52.4507 365.487 53.0064 365.312 53.4175 cv364.914 54.314 363.324 57.2349 363.258 57.3785 cv363.17 57.5582 363.147 57.7193 363.302 57.7193 cv363.678 57.7193 364.737 57.1275 365.378 56.5005 cv365.687 56.4644 365.73 56.608 365.73 56.7515 cv364.892 57.898 363.147 58.7584 361.934 58.7584 cv361.735 58.7584 361.403 58.525 361.403 58.3101 cv361.403 58.149 361.47 58.023 361.934 57.1275 cv362.397 56.2496 363.214 54.4937 363.722 53.5972 cv363.898 53.275 364.186 52.647 364.186 52.2886 cv364.186 52.0738 364.163 51.8589 363.832 51.8589 cv363.302 51.8589 362 52.7554 360.786 53.9918 cv359.615 55.1744 358.71 56.5718 357.408 58.5435 cv357.298 58.7046 357.209 58.7584 357.011 58.7584 cv356.768 58.7584 356.172 58.7046 356.37 58.2925 cv356.48 58.0591 358.82 52.899 358.931 52.647 cv359.042 52.4146 359.042 52.2349 358.865 52.2349 cv358.357 52.2349 357.584 52.6119 356.856 53.1314 cv356.679 53.1314 356.569 53.0064 356.591 52.8628 cv357.43 51.9312 358.776 51.1958 359.88 51.1958 cv360.41 51.1958 360.653 51.5181 360.454 51.9312 cv358.953 55.0669 lif372.526 52.3072 mo370.539 57.0201 li370.406 57.3609 370.517 57.4683 370.694 57.4683 cv371.025 57.4683 372.482 56.5367 373.21 55.855 cv373.432 55.855 373.564 55.9634 373.52 56.1773 cv372.283 57.6656 370.208 58.7584 369.281 58.7584 cv368.972 58.7584 368.686 58.4898 368.686 58.274 cv368.686 58.0416 368.772 57.7906 368.994 57.2525 cv371.068 52.3072 li369.348 52.3072 li369.303 52.1285 369.369 51.8765 369.59 51.8052 cv371.355 51.5542 li372.593 49.7798 li372.812 49.6724 373.254 49.7085 373.432 49.8882 cv372.791 51.6441 li375.197 51.6441 li375.352 51.8228 375.22 52.1822 374.933 52.3072 cv372.526 52.3072 lif383.405 51.9312 mo383.295 51.7515 383.053 51.5904 382.965 51.5542 cv382.832 51.5005 382.678 51.4468 382.435 51.4468 cv381.86 51.4468 381.309 51.5718 380.447 51.9664 cv379.543 52.3785 378.594 53.0953 377.534 54.2779 cv376.076 55.9087 375.591 57.3423 375.591 57.7554 cv375.591 58.2564 375.944 58.7584 376.562 58.7584 cv377.6 58.7584 379.852 57.522 381.42 55.9449 cv381.485 55.9634 li380.757 57.5757 li380.58 57.9878 380.536 58.149 380.536 58.274 cv380.536 58.4175 380.668 58.7584 381.177 58.7584 cv382.391 58.7584 383.958 57.7554 384.885 56.7515 cv384.885 56.608 384.73 56.5181 384.576 56.5181 cv383.318 57.4146 382.678 57.7193 382.302 57.7193 cv382.126 57.7193 382.016 57.6119 382.147 57.3072 cv382.854 55.6763 384.774 51.7154 385.106 51.0523 cv384.974 50.8199 384.399 50.6402 384.024 50.7837 cv383.405 51.9312 licp381.75 52.1285 mo382.324 52.1285 382.699 52.4322 382.854 52.773 cv382.5 53.8306 381.574 55.3716 379.896 56.6441 cv378.638 57.5757 377.975 57.8091 377.754 57.8091 cv377.556 57.8091 377.423 57.6832 377.423 57.4683 cv377.423 56.1958 378.77 53.8482 380.183 52.8267 cv380.866 52.3248 381.221 52.1285 381.75 52.1285 cvf393.115 47.5757 mo393.115 48.1314 392.63 48.7046 391.945 48.7046 cv391.372 48.7046 391.15 48.3462 391.15 48.024 cv391.15 47.6294 391.481 46.8951 392.343 46.8951 cv392.85 46.8951 393.115 47.1822 393.115 47.5757 cvcp390.29 52.6832 mo390.399 52.4859 390.399 52.3423 390.245 52.3423 cv390.091 52.3423 389.517 52.5582 388.413 53.2925 cv388.214 53.275 388.082 53.1314 388.127 52.9878 cv389.34 51.8589 391.04 51.1958 391.769 51.1958 cv391.924 51.1958 392.033 51.3033 392.122 51.3746 cv392.254 51.483 392.254 51.6441 391.989 52.1636 cv389.362 57.2525 li389.274 57.4322 389.252 57.647 389.429 57.647 cv389.804 57.647 390.975 57.0201 391.725 56.3208 cv391.945 56.3394 392.056 56.4644 392.056 56.6255 cv391.725 57.1451 389.45 58.7584 387.928 58.7584 cv387.816 58.7584 387.685 58.7046 387.573 58.5972 cv387.441 58.4712 387.375 58.3101 387.486 58.1128 cv390.29 52.6832 lif398.542 52.899 mo397.593 55.1558 li397.703 55.1558 li398.365 54.1529 399.447 52.7193 400.022 52.1285 cv400.529 51.5904 401.081 51.1958 401.633 51.1958 cv402.406 51.1958 402.517 51.8052 402.517 52.0738 cv402.517 52.3423 402.317 52.8628 402.052 53.15 cv401.787 53.4175 401.435 53.4361 401.346 53.0601 cv401.235 52.5933 401.103 52.3609 400.883 52.3609 cv400.684 52.3609 400.44 52.5396 400.109 52.899 cv398.763 54.2964 397.527 56.482 396.356 58.5435 cv396.269 58.6871 396.158 58.7584 395.981 58.7584 cv395.739 58.7584 395.099 58.6871 395.253 58.2925 cv395.54 57.5757 396.931 54.4039 397.527 52.647 cv397.593 52.4507 397.549 52.271 397.351 52.271 cv396.776 52.271 396.181 52.773 395.783 53.2027 cv395.562 53.2388 395.407 53.1314 395.429 52.9166 cv396.137 51.9488 396.976 51.1958 398.035 51.1958 cv399.139 51.1958 398.741 52.4146 398.542 52.899 cvf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 11.0.0%%For: (jc) (qp)%%Title: (logo graaf grijs [Co#259C29.eps)%%CreationDate: 20-04-2007 14:17%AI9_DataStream%Gb!R&pKBW$dP,ubJ9q82"URp6?m(q8;9YFRU*L%ln+H\M?2LVd8Nea0"604FF.W%UJ(iB#?!U`A\U&kD9Q/^g\%9gXmlq,nb5)9=%oo#=Gs)Yn^n>LK[(f#10Z\h$E`C5ndTVE'"=AaTUfXN3,1;&q=e]+.LG>oLQC5q1+gM?Nf_h:8'Y1116_=Y#-<bSl[L#/J$)>WAR%K5LN*l#nka1`H`cq-@c"mag+PHD:Tr2sSF(GW`nLnf.D<g_c"N2Ai!=M6gh*VqLTZeE`1s&q7jH`&ZMs_EX"?&!bT+f,*Uq5KaB4%ltnY^^I#gE"6oi>Sus!Veo3IEN*<p_93;;Z]$]cO/#*<b#,`qjd4]H4S6$DMi_R6PXH`@:Z&B;sGgXk.Ea3'VhCgZO>a>MLr$"b7%p4A"2`kP]:Ijb/,Q!14Ml4#s8%$b!R%>X2aW8.4k5Si]V>Z"JQ$WVl1MN[]2C><\8DRus4L7In@WXWpuX#J`4]/`KW>sSTKj?H]F%(]MlE>ZV-S`X(e$f,c.\?p7&0F?]+,/,qF1ecZff7eaK<9Aki0U0ged!):9M?l;H,b8ea!&G.H0?P)iY=Y_S0NJ_6(#fb4^;'jl[%Ma=Dsl6]sI(Io`kJ7M[.8E"O7W`t]1F+-RT5o(,8W;flXIgo^dqInCBC=JI9f!E%"iZ9L!R"<NN!bJ`c:$nAE4*^nVNVaX0jR9SL%*qY2H!Z6=JjGEG.C6.?$iLi-t+*Tqq^/2DtX#Bl%S93,kke]!Frleb4r:F@jHL7rohEcXeNIhZG,J*Wn3M<SQpsq]'NLd2YgTBV2%df4.6S;)64DU.;9m`YuGRg'=;%.^=ln'!`621eFJ..*)>_&_C"4i9LTC9QG3G-$7o(@1^?'EK0'DKP23Eu=:?$a=++?Uj)B_/bMG%@'.r0P1G$T?]B64:SH0PWH@J*]?6f82Cq2hdH]9`/*1bde?CjBfBK&Pn<Z?iI;GM?WLXS[4nSQ+`F^3^KjRZa-cclis0P'Wm$r6G%s6c%7r!?`o#uFM;[mr)[s3>nde*okU46753nqPPGnR)&"`qKqW?24nPGj;W&ir)+2`sM\7"\o$j$iVs^dgP3>6gO]9&%U>@h7$=_%!-%q5cbBS2_S64==HNdDgbkBID.$uc!^s$QEt_+Nda0r'>,n!/I/?7`4^bu&1\1-gr&hrjUmnV[dLA9HQ\c3Y"=Uq\+5_/j]NE=D%X#(Tua;,P"4nQH_+d$kKL/qDGH_d3+*9R:KRphtH7[Lr6=:IimX,JOBi7j:^2in^PeZ.SO<!NA9J)?k5cU%,b5=4[Y]e9q-Gm&aY%rLs75g0NnR_]N/,dP+L3nBLe)^FJWUhEgi'*5e;Ta.n.\qU;#-?r1ipT[O`Xl2^VJ!FV5ri*Va8X&<f0"ulHu!94#>%0)f!86UFV%T<39bd-0bC-HMM<#\%f#WfBRTBTtW::9PruX<:`d,OrO]Z(@:mLD\p:%q]L]4++(@b9H3!R=^k(hq\KH%Fa&t*[LaHD0\C%_uJ<,%i>SFsaDjd$J@,KiSeHe$_c=*5b[L4[%or6OVMV#&X*lqlo@MU]Fks:kIrT<0oRBF9$h/cJk/60j8bTP&5Q:V29`bgZXkNe.`#i,Q%\MkSZ)T6Fb?b%LFaT'Hfd<,'K>W""uru+f8a&1d>?&dgYr9mh5J".;GmoFl/3IcC#4tc@Vs'N2Y*Vel!I5Y9RchZ;'`5PkK;?+g?%AH4s.XD2YVb$hRF1",uaEu,*-R-F;CH^6S'JH$6Z$^0cSj-"S.iatWp;sjm,@<C;$O'1%PH8152gL%%(S)[,Ii@jm#j8K2GOr$`C%`iq2m=2TODps7$RYI?udC9-//kmU`.7:%eu;#QZqW7n9\lM_\+,Q+Wm@&S3hHSu*<A%cs\<_^^J3It,a]5eYeF*gdbbjAW*'&h<q%m%fQc7tXEXfWW*)f)C6b>'9kLofin,Rgc[)rdL^$(r4&7\4tb-=r3c=%$$180#j[cGiZW>$qH:Cl[MGq^D4o=_%U\SS2H%nF5C;@%qesiE^BM;#UB[g45qJh"S\Me0d.[OM-Mj/'j8O/OW40beC;LePj?&L%*l%eU&2G7$.I1X+8/UChR+Dp')jmi'>O`#5/+(o,U8_'/%Id:[5%#jj0Fiu1)+8aOI;:!1PZ2Y5T^_m*,$1`W=MuB\R)Ze&[/+#s<2SI_N<rcat<k%$0_--B\F#Y*1^)N8ORHRmk\,&@QkdpR#%S;/GaD9a)Kj4*i&eJRr+4_h8=5Y\@>W&O"jgYgsLmu8*.D!h4^`Q*-+ot`>b\RQu:kc&HbDRVP[&#-LJ;k8ki%>T+e38JT0Xj-)3%ndA2Xh%NB/0E7pl[j7Tpkg6$TYE.jg(sX(of!D]ZM%3&`ZTIfjYiR*hY%GtUpU"V!YSsF2^f]tTL1ab;%OQPFU2riZEH9k1^:*L:%G9&^F>I!pt\EmbXcUtl*BZqO$c/M<qN+R57gl7+7AnIYF*lB/GR%=(r)bj`$s-c)Q[=r6i?_@ebNINh>mXon/8+GQJ3h3H/lr%cr%#9Q*m?T:oNeu]&.M_=B;dG=/:a#fR&pTXD^&_GN6ceShl*q,fsW7Ue![ga7_M#`mf^`OKf8Z4doVkEb1gP"9J?Q7MDH]NT3`_roI%Ae?uq)c4Al3F2NT=LPd_]m2CEW0K>d+Uc]p`&Z4f_=beQ8k$l`F_8Xho2i+VC5pqGY*s&)M(&46[:^L7lo;r1jd\Lmq;Ki(2Q4Yd%TOAcXQI?/W5/UR+46nS8IJW?b5Eq`pNAmtDV;6t-b@A<5).\N9H@r(Lf$$>S3)0l']C^HfencPJ?Ei>ccedT0FBr*oldm)_5cpPD%[C,]NDCRbKb\*F$f8u9rhIsp6_4DFKF/Cad`B!2ap8GDhSP"B07(W%<X/HH7QTTBWc),Hd?WHiKcK\MM$sV!E4EU>pK/bTBAl/qZ%q?/-'Cs:muUt`YtFedbT1Bt1Q816("BQ_tTg,F_Lj0I[cSY0<t1E(*c5ucJr/'REW#mF@cZZASpK`^sJBD8feJg,/O?"mQ#W\`hG%,Kl5@6'o0KlnQ-$I'%lXC?rS0rOP(G`,>F1Aj?"jTaRI=[Zfm'W\9rp`k^a%RlS15h_5nG>U?9c5Rb+@`+6/Ih5':m_9A[]dFjSh%Q%LeRD.^>L;OjgDRWITrTGA#l%306C^0p:fr,21YCNdJUEB7&-i7Kt/f6>ZD@U9t\3m5DBSarV_s'ihn[J<8`5"2i=1$oS%hh^`9%VIr;HlYo\"US&`JBtb3=K>`.-o*=X;C3G'Gc-Fp,fBr9IbA)(b;l4F/l#'Y2lEe'%ImmT7?9Bf!_@6/G97*GF4j+AoDfpme!N!-5%Io@%oV8_-:W,QK']a>?Z4S.rJ45GKfS1\H8NtjASj45r_0,WB/@N2:TpjOf=H;aVgKJ0lXl6l0A&e6PNpZ4K.W@&XA@$geZ49g5I%n6R)Q'`sLFAtgktE*M.,\FrHe?X4JN;i1L3.QpCp7pg3op0QsF_-k"<0O5aWK[S[kF/Zj[s3jQ3hW<>oKDeF:Y^QCKc+KZSVUNpF%qiX'LDjB+(I@SVpO.K_":m(^iIS^mP)jc\>cOiqQnHD(+Z2c"oeTA0JIZc`lL\o6AmTmKPHPC@G_>N6eOi]a%*j,ltl+NN!4T#*H%DBC2bMIj>X^%YcZS@V;8cYj?B6_>qF2D=ORqL#^CB'uE9B%,?ZUTrA3$YlfApYc^CF#)%[00XRb"!Q9*3,,Le]%niSB\cgg<%3Jj%S!ABnja8F#7Cb:(SG-?)0Lu\W!T*#p_oBD'(:'*kX),Zi*%HZi/bdurhNTW3gCZ0%%:9CQQ\k%LhNd^nG[Z?=EPAAlOo<25VD.(c%B)p2Y'&OQVLP#)\r.7/N@A^d7OL%aZ4Erl5^*JmDNS14`GNDm\EVp`!SFgsa]]_DUe2f`$3_elI%L0OrcsXp!#>T%T.OFdk=Q:%K%:6Q0sU1Z3I8]B"PAa:L8-M7P?egc?F,J.4PdW*^C_Q0nidr-%n-=mOPe!/=W^*$*"X`&:diB:fV$P0F7iT%T;4R$9^GEY18]69_:%n;+\'PN(8f7POSHJ,N+hA[g.=]R<lM#1)?.,#4SshUBgRs3tYu0PN(Q9a\4?Uf:k[qH?Nr>8*3X@csl^2X/uSjg0=$123a4ab:2T%(S$jn-`)Ii/%8*22Y^,>fm2$%^rp]qZZ.iW.<$,@g<4;Ws(A**FIG%LCa\p^-5AbS%j"XccBASG%no9#c@O!*f"+mqar=D&m_W[9%VXX.SE1'[/%t8`KZ4iG=/B5%3jtQX\lTFDTPMU&-j9J3INn0s1qP4Y,cieY*c@rrET6=8gr:>-K[arK)VC9JeS9/sid\B9-\uN\.%R$<G%Y-dur=IGP@bbD:@riR&Dh'UB$BA5)>o;'DkM:C/8r5s$-EcR(n;sCqqC&PD9jr'LWT41Li/\L4.l02(*r95pUZ6o5JWG-:[%\kUdJbFb-i<OYO1RG63iY4JGX53NC2'N2PiNbc>qT<,RuHM_lq2KG;ZK"3s&bup7I>,Z/]p@E4+QS1"PPJ1:L+1k;EocVfn/sAI$%[q&g"m?mKKcbK=I$WZ.+-[e(:F^6@8"NupX2(;-PqQ/O-q,Z[sEDkm\[MDEI`:>T2+.kYPj#?d.T<uar-Ou+h(k+#:[`Po3epci(%^=FM"^7@gTV#(gh_Q[B3#1Jo^-79i-2YZi87gBXY(].A<c]tE42JM<)4gq]6k[8YA+2CHHdlckSAup*@SX:*FQ98?7ZtU''e(=dR%N:qsH:"&MMM<q3idZ))9;XNJ>RE:^(dZ'ha]c!KJ8Pq*h-$2_"OLU6F+F($?Ge_g?C8:>Hfg.[1fmN05S=U@M/06rZZCP4/[m-:U%pYa]s.Bq[aVTVojJ^$_DW,kV/n^W^KSkBFfB#$S-<[OG^5M,=/T?="j`3],YCA/H\qs*#1D<8+p]&icFc##YqS=]",9JOsYi*>.l%<\HY"Y"p_%C=OPqVomELdI,9+^t?]YO#lh)9r)@!V]Y8/@e+7+Utg*@HCKh?&$2[-(qU/VG64pch`^-8H`g0%K<Oj#do.8s?_^O!%aS"rh>:t!]qR#j"fRJ$j$E1O0MC-??T:^)>rk7XH>.7Zf\injXC`YfZ]45Y5T0B;6>i.a(%b=akVs+2j&PfiF9KZeTHeZQ?';=L*%R>tNZ%M/30g%b!Re*HbGm54c@LgD5l\^ZSKChu0@]&fmjqN>]E?GC(*NV))AHF/6fFViK.jb$aR`U"Q#Vf"_:b3A6Xi#Q6'l0G[e%OKT(aJrr`FG]'p??!/%-D@o(!@$SMf@:k)Xdj,lgk-"+RdG*8n+So-R%YUFjA,NG3,l!o>`(o4.Bqt0kRD.b*$:(/AJ9BTCQ8W:H%""j%[/n!=s01t2?oNXs6qs7MS,dK$@9AAg/Hb!3#drfemgY+1Fk8N+N+?=XZc9)tHFRJ>@HD7gDcL+:#m3f28%s.W!)-5S'qR67r%K!%8GK=c]kg_$B*YA4/C9YLkKGSkFqb9u10oF#!4c70md,-@V:YB^t)laRjO)ZA5KL$Zj:Z?(3;OQ"OQosFYLju")<%)VOE=/-F@%aL0LKl#)&4&VY(]Cs`+]f!<A"Jlc-&&C0j-[@`MNem:3b4\E[<h/8N;#GqLHVL(Nd@H9,k>7qDd4LJgSLUQi5(Z<jOPrS/2E!;:O%SF2[i^iS9?iB6l&"<?Bd(3g@.T"mGCOLtR;Ge*fEl25GW.7Z:*EQ-bOeSO/o`jDj25J?^k?9Wj;0QEFPQ_WFW0Ylef:2<!)[7q4c%SYWLn"U_jf^?.V^F$,%*i6leNQ*SdV2J,ZE)"UnM_k`ssgSZ@OnWK)*'"q-`-g_SS0\eY\RJdiVoR-a?F2+?jf1OYXiDscTo<j@n%^"-fbn^H95I1J02_RM0F0/#r]>NF#+=83^OiSWoT5TTeUA.K;aZL*lf0oYJfkI1HFni"?%-`c+mL[%7_<F^5,C+F-*gZb4#4k'h+%[</r"(_lP`eW)iWH0lub?eXk_/1A`<;2@Bb?ehUC1pn2DbNsU7E^B'td(p_2<g%Q?$g'7SKIe@':54@K)*,j?5aE"XIc/G,pRb?8%'!4(]IMN!FSB@8X<V[jen/Qu5Fp/B-U4YDs!Zn%36C%D'-]6Z!a4>LTm^k(gIU$U1eU0:cb6?q+3.&3M7<W0VD+RXQH1KI&*0rWV%`(`?blPeB;:5Bg8X6cmB2^P\u2M:&q[roJ+,9Y%h:mVCL.nS+`.0o_O#1BWorUiF'4a&pY<FAp/r(?LY8(?HT6`0>3R]43-#(so+%@9YsX`+<>75U>1k_^]J$1?K=&5&[@dnG26+#dgsY*JLF>5Q:M0=:!tCO6R&J/Sun@#_<I*mE19\RA]U!g7Q;=dsoUpa3jG`c(Th'%>p;AjjR@7)B>/EArVZ9+BO\0`rf10NfIOhqI6gp=D]A4)i*f%P8*)pi#Wd"^rRX0HOZY5Lp1f$!EN^:WpnkbY%N%8u>b8&%A%@E9%S_Wl%r6Uij]]RU=E&SqI(C/%u7%iOGJXQZRfW5TY+?@NcH$Ef\J^fVE=XjP_"kn5^R/pVPr\P9uS!GNjT3gNi1r/_e*R8SKL.5)&%VF:F]dnBDRnba/m'J"ru[reYu185glZ]4,UC*OdQnu&'MM%VRVW\]]hj_Bb-4EX&IR5fC6`EDl?Tph^3b1[^l)iJrICc#QP*SqhX%RS3*R@k60#>A&`CcX1gLbrdq+nZ/.X(%*G*_b`8oM^RbpdRbe1<b#tkh@F8B3+($%M"C;@De6;chW>3k*-&V0:!f,6heKsULjRZh%lPql]/Ts<Gn,CES:S*[7?H`f3^3m)eH=,0]<UYk2agtVc?^-*g9BW92BS7"ol>"qE$`C*K>$@s[3)f58_PHhk5.p9nD@Z0sAWGa:%P`V;i8mcQ:0c[E_NNJu5TQ3AS!G$N*?l)+?Fbiq3Y*Qc*@=C!U##0H:?tZk8aggu?`ZA8tll6qM<-q,HK?N&":+Df0aRE%rL\'qp%%QmmX1QUZ$`XY,9%r]JZO_$ZT(1RkjS#aBXrm2VM0s.Eh%:.FkJ/f'Bh1[CM=-+3+Oe'`$"R2Vp&4fuXf,5u4I)Q1YDZ`dJhell7%.FlZf#Gla$J'>:(b=R'El,jid2jBV8"**a?=NtA@jeI:mo^jM@"Dc)S?cPigX-+jOn--KEi?VXKJXg)%h)PnZ(NdI7OUFpuNYgJ$%"$#1KR\p2CBT?9%OPKF2\X-1?1C6%/fb;Q"2R:$kP[&EB'\W$aSBoAr?k1&uU)kH2]!:edK2?IH`#t?n^/*%5]e1KF?+Bh&C_n"l%.=!6&`Ed.FK68m[&V7lWp)=,I#&!drFm\57h$?5Q:Su>RO"N7Z:[cDY'5^>0$bqf0D32F44uV;Tk2CF"M"+'iClLB]qf>PWk@AQK%RL@.%::-iPVZ&9uk@GN\<Th;Q$dIiL./l.X1d0!V!TiH3>8U/q"@sZS4OCac=(7qL0H3,6B77*c#<h20JdN\C,YB;j+Q=iuH/>;d%EPDGo-uaU.D5&H3:-8F'#p5MWZ1)9ZP>_c4^5OkG?4InQQn;>5K:>8B@]r&+FEXL92[L:>_cV.`(iteVb7OB`9ou!-n1MTY!2P[X%T6jY$CluZH5Y[h.Y96QlqZt]9\97Ja3pY8'r<kSRXB[3tg#qa1l6H,+-RU`mMiZ\\?'"D/J[`NpLX!RB%juJu-%\-[J6SDjO.?$5%=.+u"^#N8-YhSE&Z4^U$o+G5rF*\F8r5%dnRCD"ELUM/8^'EN<\KeI9jj!D.5.cRQ<]KsfHTf6UM.+SHq_a@eVZPlg']JX5IE@:O%UND^[;)IDHqfr(-&\C(TGJ+>E?dOG(_qi*,9t8<PO_ld)_D6ab==0%5k@JP4E8HB\:(>]3_j7Ic$ei"Z/9$8qa(+'OIH:B^(b(+c%s7U7;^ZR:1PENUK7XtLjY41@Q>Z;btEDD26,Bp`8o<J^-"[S#>q`"1:@YNV>/-U*3U5Q5$oI*HG`jBB!.J\#=,Nd.+BIkp`CM:H_%ab7#+Np#t-7,-KFO"G27o5;,^(0q$_.$iXI9KW+Z76ImFi-;KQY.=@l!U`tB0DDq+bp!,n-QEXl=TmSV:B('7dXg\@2ICD=\\iTo%`/$_T!n8sl7pL(_c3ZU&IH:OCn(,U-\290sQ$_[FQ:V6=Np%*mpe@gj=]g?5AREe5P8T`\d3DE!Lh2au]*e!M_TdDe0]'e>o?Ta4%ff-qbJM7GG(<[VO\Qb1u#*<:h@bE&>1&LH?f$5&SSoaRd_"q(XQCiYg_lU_98<Dp_Q7X+h;6fJPcfHL>;'Hr>Ibr$6gL,b<:5$9$%9.s`lJ:!_tX>`U-4-!@)>@@.'hBB4TB""FV[`_6DT):KK\_Or,Xk\CF/0O]Cr)NIXQ<%aWA)<:`gR]>0c.@`?4Pp`[dZ,-!T,-=V%J+gQd\iP-8\BOn=RX"dY_<K&=rPNB`I[I$Dq>FP(G/7-U<$<SkO$dHr;^s4j(7G'g[FmX@7n,VQ'`h.7:1_SM#T.Uh%3ph,ah[q(%7E1HYBkRI^]0u?Z]%,bmH9F(5ITD==ibiD3HEC,+l04agp+uG]F.E`gM<P/$G.Ff7/PE"_,[.D!qfFiEhb.=!X/DAQd^tm`PBhr7%jDA&TYSi7>0Ah.CXId]B@VPg!&3Eb\HK"LQq@JI3IU1up349R+e2g7fXmlUPh/rJ)o9$64*Ro$[H*#)7aApC[`BnfgK^RBMX[;G;%[Y@f3K!$P:"kKNFlV]o%j>SY^/+%abO7Un(C:`'kr8>`OWu:k.4,g<0e\1-WU?&$*@/M(,3VDtIVgBam0/KdH?6)P+mT8<9[[+><%QcGNk]Vi0q"^.Rt&J&A$e^(?qFtcTXL=A@3mY/<jrFaNjT>7RjGBYY">0)UV$Yi>e\-MLI]?/@K>i;FNocIoGCdm4:l\qIKeS'0h%'ThW>K/&):osG%o2N*R@qYVQ$`WU6g]fO`RT3pH%^`AV'Ild5+Z+cm5nD>8!bG>TA\+b%o)Y73pNRc\'KdQHrWV,;"6d&.QKM1$p%\ne!aT1TfL'cdK1Q6^VMjj\0`FH9qhj<NFPGl!"T\:_6[g4Y>@,90W!&*DUCQ9!m+_)iN/V9P$))Fi$#lK2UeDgO%1S>p5/gO<*I%OUdbi=,ftc;nN+nAgN^#Vm&:u:rO//j=jL9>JEbfcT)hI\]N"j"\c)IQKPh!D`,2V3oOPD@ZU#E2LF;$`.@/u.p7l`ODjB;pq0Y)%fG-aIWc*ZCp)F3uI*5YmhjtIDk91CLd8;k<%K+0GR7Jlu;.2BcJPI3P+kh)!BR/u7:_/kl2idSCF_&^SHf/9&M`YUZ8hRSt4,g\4%`%kiso?Rqgls*=Mb(l?o.c)ot><F7mS8"%8'X++!\WtN\KNA^"7?BW$hRrnH02'1</*)^FpB\]RHe@TTC:eDSh^[6!426L,S6gsj%Ot,WD4kt)qV95uec;F41\lBl%4f;5VhZrK*.@fj:Xq\NL`;:O?5.?+Ko^.l9"],*DWo0:N1ZH+1FDas15*R*_n5Lh#8Zd*agDoh]%%R&\"j11E'ZYjJA#O]"=NWkA"T'XG/YjKW@o_J0obeF9od=(P^Z7`L;hJNBuUfr%!CkWpnhd"H[e]RJ6R='o56]]CU,V%'nk+*!A%[l].'TMjBM&=IU7O,Ka\WbIo-PIRi*52-$V&qa6@l_GY.hCp&=:PqFs)DbB?B0']I/S&mhGH+@(rfK\T(Y,mNGOG.[ok56\F"j5Q%2P*DDP@AuTN0-g$Q!hfTl`p(:2e!W`WLT:'1Fu%?O;>9e?%JFS#^QQ/ngKqlH/^=q5dG47fk92[@ClXj0uu2:1?7^CS$9-[?$"Kp%E51PtA_<MH@djQa)rWT1TKR1VcXWC0c_T+%&9&;FpTNW1WMYTRT.h=d3F;0.RodAD]o5;G2_;K9P\/EY0>^uVj]Z0AnhM7/#O=k>%aiC_*`8\t2cpA^j#BGoa1J3rra>;`G&YFWi3Chj>JW:Z8Yu>f-JdAaJ*kn:RS]RH3h2Lie?b=\OQ1aM.PkhRh?*B%\`tg_l0]IHr%Ra6>'k!jrn]]*=ul6jC"S<>GlQ-eCZ0'8E>H`k5QID[4/6Ed,fb83R>I\27mKB2#Y>Muq'HN-a[doR^:aE9;FD<L"ph7En(Yp@h/%/WV:ZrTTKeb]H=-;+/TRa\MDS'uIeH]JXi`bsM/]:/pAe?A5Uc/^N[EH-B##$dNn0HE;cXY<nm+]M"Q'HT>k*DroZe9OZN>I0@\c%&u`hbcr9+`eUj32NetrUNiRnpG<o<e4B:Eg41JBk)P:!?QF\@BiEdpK7FbMNQALoWSQ@pR.D1huJ.ZXtZ.Ig(LGl?@/"`a1jknW&%C"bNq2YMMon_?b*.3j1R)I)E;"Q0,D?Q@I?RBNABf4LF'o_iNX>ec65e2R-7eF?[ncBS4/2\:?ok$FE;2r(3CI3soCpNgmr7+_9X%(iRId]fiMC3n:DES9,eCG#KqhSap2L*=G[-,:Fn<&@'&[QE)h8HBGPsa9YhY(<9&t4>)o9e$52bMgP9MgtG/RQ`'bNcC+B4b*V9u%!TgmVSb$(IbB$;k4BHjL=%?aQJ`DTk0brf<T;R`Mht-+e*E*8@MTm_-!I\O/h^*58$<63a*./,^4:WJ09CCN05<6@&pCKI;Ir,(&%X3;d/]&rG5Z3WR`S;7*N7rbMTiN`i>'ObnLnnl^R`A_^`X1B6BX7W"S*\L/so=p7Bh3&rAYtKKuBs(PZ7:t?Z%9h^?`A/9fhR/9p%<-7:h/=TY0*lW/2mEK.d*%dIh<=5p!/-FVEe_HujMO.t3jb]HSkER\R.@-ko,c#g57:Ng5G.+-7-OI*@M.O'g(T[H:Zn3hp4aRl9%ZgtXt+mTQAm%^[2:La-:Y^#!%o31Lg^l)bS3n8XRnRUidp%$WWmrCW)&lpLV!Q+:7YB&O<Xl!7P]g1DO#>=u3i&uqKV=%:Voo]*"%YEb`OlTVfODV=huIt:9pS(Fi)SFHC./.4"??(ol2bM:^iF71)T0U3=[^KmumTHYWK(DaNB7<RhEXm#TS\VF2B5$&bNFt7mLXrn[M%(HD<K8sU:-n%sL:(VQue_q>:[s6Xq4]%koUQGjg:V+X"#eOrmtD>CQF)e!cj%`cHa;"aH.WC'`+10.)8Z!t<.$O1'4m*5&fe_A\i%Buplc:OK%n(]9I-<DS">RW/8VJ#I[fT.fse+0(q-9_Ib[/H)8Wf<q^P6e)jBWQ(DUrnp/o:1*j(rJ.C#JF`sEj?qH0qe)p;/V!;a%l3ZC)%sIUfWh/uZ[8Hh0iX]$bI&7ggeGeAneJ"/+f<PA66e)GEopKRDX0C:g<SO>\m=AX+LT208*1g(ul11N_LI`Vcg&1D.eS`/s%>"N$b<:.)DI-@\eGI\5a:Q.5\=6EhPbKG[@(TQHep7^dIUnY!1o7s>/QRplU;sg/pl';#`5?'d1ht"5uWcgY#l^,=%9HKgc5eOGH%dq+qR%nP%2)`pe0G+K:*jZ8fR9>DORG?0"_MPE9djk1^QG#Mb4?K(j.<cPS"Y;=DG/=g(:]nd3MV*')BN326bgkk%WhaBp+o'@*%%h0:?op&G`YQf"'@HRR0__q:,I/!o73j,;?d]NemV38<Of7Z3LDHd5Ld<I)"XO.'jKa*W*?LZ3.9<%_IJm=EHkY/Pa5[cai[s/J39%@1t#HZe]bk"\,"d]BCNZ(+de/W7J(1HcEdE/^Ia2?[bkDm>+2XXC3FP10=?Yn?,Nao'G7`J_`tE[KgB]qC9tBjk1]4Zfu/?D_'Z"%MmJb^e_F2sm/`Jiq8j#/B6u&P?8sDq?(UGWeCZ4RDo)!\&&m4CmY171T'`42gR`Po<-e2c(gF4rEc,mj]^t-Vm+?rTp3?dU_<T2M%ON_Oqjib!.6#t$cs)iUqa3+6cQ=nMscDGZbENP5B`'M^"Fh2k=r-#Nt*SpA>Zb=tjch_gnVsfIh/fT"E9G99a?GTk8gY)0Rm8roH%CeGs6Im&/Ch6;;hg[e-c^\W,^P6O+LNnT[h1UUK>Dkhf.]?"Q$+ZcTs-MIEOI_E_7SaCZ'Ve6-Y;e3PuX7/,L)<^hl&l=?35QC!*%<K+QFe@OXsE=ZBc'i^,ff8BPr`OJ"L<`q/kJf>1_</c1;iUD%+j)iSshc5V^q4b^o/&m!Y&rp!k0g;-ooG88&AqcdcZ14hD`iVjA%g#GA&VIFr+DqHXB0g6OdX/[#Wr8csTVn?&h:W?`@VIJ>cZ@:mMj505KpeA`;]diEQ.`Q,_NioNoI%e.WQ`_0LrE@cE/&kXhQSbmT%I"Al)?W;t[jhUmf`V9dRbX9@Zcb&iJ7E)cr`r<&KI$&?u04-I%o$."G=,`=^5rl-reR^8NIDP/dT!,k;HponnF"50Y9(lS[[W'3q%k3I(eGudp"Y%\^MWmKm+R^RIslS948cG#3:=,a>C`hm8!dru<T=IQ[+`OKh0dq.3in]<l)rha/[rMJ.G<fENu:KsFZ?X'76r&8iU%GcqtYH2-=jn!+@BX5tBp>(0='me0qXeQ.XTVQoBCnO;cUD79U-Ie7&k($#&uDPqmHeQ.WEham]omag`^nOX5^2\kAeq4<BW</d:d%L0aEI<RN0C`g==WC;Get)'4qU<fDYhDUsdH8]<Y$bO/^;=_5R^o`^E\^(n;"`OL]Ea9jE:*NZ&$W#-nomoiK!WeterlIi5UHAROL%j_d%_ZsnD+975u]EJHV"rh*_j<".Tco%Q\nYFf,UmL)(*idS9Mj00<*B)M*I`Z69K/$Bf!+sW]8MG$p-PIs*2:Y`.R@ba*Cfsps(%(#s?jm8m7A^<lgg937(agcm^/@XK(i1FgDL2B9KJrE%P.<c'gdrBI=m\,%8fri/$7lK8QS?$5r/[B-Ahh!4&1r`sZV<GXbqV=2r7%LKh1F<n5"NX2?OICgUUWEHSe#b51!rLJLn#s&!q6grfJY</4[hg7\';=`q5S)fE``^ShXo77+UH#)rL`Fh"7bl;l?*</8*I^ot1-%HpWVaU[%>?T@2UrLTg,=H*aNgQ`(^)U,m\af1T1G*H'D^09O`L\N8MLY2`S><`C+-OO="3e_uN+h(,Z=\&-d=l7@Ba*U[GaXfOS=%^n"Dp`?/'7>KH<YV5NFU_l%6os.h^2>Q38nX2F0QK"n>rT<<M>MsBe73Jsl<%\FQr>toIO<?"+Lg\+_!iGKK:D0<?g)t#"nGhMA$%QgDO'=,1"c?E`MdPNm)pd1c7(XL(%D8k/@Ts/nE<FY,,G%_$2j-Y[C^e`#pWbUT[2SYXp'X2AT:b6k;fXkN9pmYfht]77(=$[fO4%L;ioQl>UOF*H_:G<JOeJNA9t<WXbY&`OVH&E18HQB@Yt4mT!XYMSesY<)S/IIGo8fR7`S1"cX4Q:;d#4^7"lM`BO?Km!AAp8#n-#%om!Nl-1)^14BULMV_8%bF0Ff<C6e5?3M_nMs-^M7H_F?_.?#i\b3=X8YP2>Ha4U%/^C/iMAQtV($,7$B,a.rb.33.%pX3?8Q$Zi0%/"RM-,.1RW'0n-hMjmqDMgU*3CV?VNSKCooQ+MZ![H[T!QFa]*Ih9a3gbeui#s8+;?X_5UQ(ba-IW*cN90""uDZU15VMsNl3#uG?%hu[7tRHnrWG',jkc@^8sNNImEboA7uGe#=RB3!MEUkJ^7'B#`QoEA<9F2I*>HFk2K0&PWYJ\W.[gTCg(eR>\,I9pr]B*@3F=M-iD%T$VK?+<_a\7Yf5+[;Yttg@nLui6;M]3H<dO-*dSJ<rUXaPLY-0!4]ts_-X;:fuj'g/]Qq%nB[T]'!%p3oSq?6P4AMJ]Q""96`RWE%9s#K+1tU&a:YF33H/)<)Y^$,5T1:cPUUFVjrnr*eF7CmU:RB;rG4rcC#<.de)dnubVSo;C'qL[ik>f/B0&;TA&iWRX/tV"gMQska%8h_#7lG\4?8:BbHM9O]j57sjOjE=HV^/HE:`fbS8L`4Nuo#t&'Z#nep3hUE]!fd2<KEWodFZ?m(h`-U8+jWS@^>QYm@W+#G[`#S%%+8P+`1$NRYrh9ZL>rPM3(#`H`9=pHJ0,HbG4I0H''"k@mDLI3Vldf-W>D-%bDEl"]hPrlAet]:@YskLmPO,^D(G]IM1Q<uJ4C7G"%:Nl7QU8,b-)>AMEBC1/YlZsT"iaHYVE8+iiF*1,j7(4o^1?-MnFaQIc,<FDQDPtH:[j%1Y7h<`4Ytu!q*lOPobLlm*$XSY8eT!fZ%B)rFVleO@gC/_UjV<PSsQRX)hmEMe.[I*tK;XEcsc)1kt180`Ye>?^N[G`\8XaIsbp%c"p?>1rNPoqgG7%0Bli:>-=#JN4_#k:_>%B*Q?^:H%Y*!'G/2-B#2*kH#Jpd)kJ/\<bm'Y0*29;=*i-[@X.*@/d>$N]Vo6Z25Tt^Q3cSd!]''$aG]Vg0\48i0L+uB^s@IdePZT%#H.#l@bplYQY&6$bNU':-Prc&O(%%(DW)*R)I).BLs"H1JX]cUZc)DSDWt"L5QAqCb6uCXb1aNFYGRLcG.EA2G2MVro-0Jlh.q-:%4r6VVX&ttMrOF$=p8mL_8'd;FhlTR'A,/!<jV?RFWE$(H'[$m3f\,$f*aHYSXDc[n:+T1d'J\qmFVW("j,Fl(CdK\bYN:5I=S?"1%C0=,HK=Qlie2P_:f<97rQMYTQ(!HPDaQnNm6!GUS7X9FVQWGcm/b/]A*$P07Y.0s?K6X>@ShDFqIXV4KpJSiqi:VF)bjtU1WK.V7%[`#k)rB@OW3Ar)X@9fs?QrVT43UafgHNpY!_jpuB^NM,&h4s1uPOo6lie(aTjjLUKPL=UB'%u%&c?DCOf1%?QMqE&D/R%/N"oHu&%nD`V<`1"&d(?Sg:Kt+bIH5SX(>S!\bA(GiIm+1Js@`NUT%hWm7q90e#FH7[+Z$;hCmaO;^DCsF4Ms^&fKFAu%A_ITM8aUt64;YFb%0+?u@95irVqI):1HM:MupDL%XX7BR]7?cQbc`QV9B<>3-a%>eFdoHNdpAF?a;:s,Xa'jC?TgJO;9;d4oY9Bu@dEDWtoq5@$&PK+a%p#R%VUQ:XA?uqjQbM39fLT?Z?,qAS8m6+ep%(K_,Yh^:(m_j^6:&aQS9T)eZpj'O$)cqF'XeUWFDBCuX4K\jJ8)Z_EE4*%Gn1#_B%b'30^i-2Y8ghM61@oBl4o-St=Mp9cGqt]DhUTCKYcUU4/A[[*b;?"4E[;QP!cGm>3LZ-V7>;d,nH4[hD3i,C<_\_Z0*`Jh"YT2@8%%/>gt>-H?.#r3Hlam`fFFrO:'B;,9rND;4E]jL0'RGH],_;HG5$>dHsScuXJ76?[6#q;ae*:,J8lam4>\DB;[%PQ*l#D:SnCbYkD%#AuQWMOmo0Hr3V6bNmD);F1lZHd9[mioZRO+(S/'D>>qRMRR#jf@L!iUE4EbE5<^D6/+t<d.,84E3$)F,&Q9OVroY[9lQB"bLCFr%8C.^t[k^0Lc8]^J6M^4bj(FJ=9'<ori9pM"1'^8.p\;c%B(3OATd8B\@&\NuZLqNfh@nD`1C7*I$)FbKWWuWKIi[4sM;9=oE[pnU%g<Q7B63lT;fFO<Br`4Ie%%AX1%!VN[SsE_]NSJO:i'*Fi^[+^?nps<&rT'`r0Wp^:/mIK&V<Ao[67H[j$=D.>(,'<dG\=P[BK,f;%>s,o/%:@Sg(O*<-Sq9^I:Z?g"V(`BI5JQXV^5LatHm!`YG97+0.Vj:P`<lN7#%D;\'Su-m^>_'<#@cN4k<PgY<tQH^qWdp&.plkN%1)X<1j-_s=q1AO1CqQ&tJc";X?rcO)GT6/"a%NQi(duiD??$7O])0=PH6JaaXJNY^e*UtPZGSHAn9m)o]m)V7/(&f!P/"[pK$O++%0ONl]d=9BR*S$nnqmmimF=pma68h!0V#!HeC4,Pm?`HQd[G(J#.XCRoa8Y^Q7#WII)irQKKD#'`'3!WJ%(d6lVTZBLEVa][\P;gE%nKKH_)q)W<pGA/FaF<7.A'IkcpHT#H1<%udY!r$f$h&!MrUb7#OTTWbmc?X"#JAVTA]\-GchGql'H#c5#b,\%h/KArcEt2f0c]Na%G>cY4s!32abOgOR&Oqn\6E'Y(k!!6M(PMCp$U@\a&WZIEqfoZ81[S/2`t:m*.$4CTWf7[)&cN+$i043Pj:sa*jNh_/66LSS.(k8+%:8Lhf[01i!&-Y<#Tu58^^C%$Q(Q^#:N$G<40nB#`DQi4u:QK%2HTc6c-a[H$:2YRi*u;/AfMb6N]4"#-`h)#lZ_+M_qU'UO-sQS-%BE.pT%=moOO^'_&/qf7FNt^]EnPelN343J.-(E]-GNS+dqkMEVN?;W6aSM@U7=(34T$g[^bsCc-BB(RN>Q6l0;o)W;J8c\3o:.4F%LSGGq4`OiSf:ol3gEOs(Qo*8<Xs4=obkKf@%a`&`!:M,Q'&JrOaP84uSG:/++[$MIGqKLd%##1/rTu\cB6M"r5M;ph"),%,e:LF;%%so#[H\J(:Z>6Zj:RA&s\?H.Tn8QS?JMe_i^\H$89a#n2UQaJ(?NqR?YRL=QGOdrQ"F7KN_Jmml4!UTiIYbdMf\St7=O[3sIDNqG%qW?<)QXkT&#\M^_[?8'!\@D]r\lHsZ4rc<\)2-!n?jEkrjhgUdZ&ucAAfbuja+<!E#>O?6SF4'e/G^t^'Q6m'f>bftm^O8tc[GEi%q\nMSPNC%_oC;B0q(XL5O`6rOm,R'SZn'#1bYEMY1&$.,gCI9kn)6YE_eg2NN)/3cq+0gk,ct]4hPNQ$l6FrJK+/[n\;TP3QE93D%Aae_;^QWHQ6IiFeamh^ciAq<ZPFi\0PYA-S@.QR-P,[7P%Yfb8_Y`^f)O.4:!KU2,?&iclA^C(]=e/dHMSm["ji'rkefDNjqkA2%%c[<HQH&oPpBj<]\mLQZ".q,6;_!+3J>JH*QjZY;PDodTM$@-g!Oc*7hE!;<-geMF)1XYQ,h#L\h.+]:W#WhATJkG_NFA&2UNXB^P%gB=O]QaGH(jI>.dG<hZi"o#4]F_6^g%Wa9cF!:E0TB[J$jCl?,$eHd-<U"*+DZrhlCaS%2-bN+5%c9:g["Hu^fk,:B!4^>h"Ad.k%`:pK`gFaONk=*+uI(G%SSP!>bnEH#g1X_RKD^J\FeuS?B%p2qlINSZA>bfhr3Xd&nJ*!`_H-mN=3*PH6]!(aEa`\nKQ?/&_0Q6sd%T)%OB!eq7Hg;9mtlBuhn.KWYt9:4(.IM6C$a;71&K9p]Ko3tq5^oRe6YGZcE,-(P*1"Xl.HZjN.SJiJk5^s'S?KU6K23'f,lhjoH%dk@qkk3)CVkgnu]#@05R\]'+kXT<4NfgmE9SVPG.W%q%)'#C__JK58J+,0IKGg"5BYhI=U)Y\_BjJj+p*9F<@ArdTj1&e^Xm>SJp%&QKNgiO@X,eBY:J!"[@MEoTdV!Zp\K'\&,CHM6H2rJ2k(nni41XRL\I.I0aLIN#:5q_>baOL]AFp:*VGitY+ih#X+n(@K!nkQ3kB%Hl%%eYK;ojPI:;?7)++[>PaHT^8f6LC+OM/ATqr95E9oidhb^X$jl<''BS6a?\LZC\L'8SOB]8G$f#BO64;s]#Q[<kW=`]O2tgSA%=grT(C2`8[>or[Zl-m\W!c(*mUKXk4hp;,`k4[QWhD9YZWP]N:iEGAQ]G3bFG*MlK?2Hfh^H.;UQ[c`eMh-<aTp)YkTV]]m6]E`*%"iA)eU-$(3$X:=UK;fhE^ud]InZ<JWhk*V>A0+)%X*/tS?i0h"5m'a"E2jZc;/dAHO21`nCP5=$og4#a]1@jQKe/QmJbXMd\=RQ\%*koY!i$H-=aQLG27*eG;"af&4!D(E^W((QpR91ZBTeT12#8i/S!"<hSQG,J"I)4JPRcBj-"Rs,*V3a9sIbK;q)LY6DX(=P2,PkF!%mHJ@EqNuU^jJ#P*P+Mt\]6AtUk"@43/YA'pO^_Rr'[?i&VjVbCn6FjaP24/:()T;W"A8/P5]%<PccO1$\<X&lX:98hZ*?2<KM/F8%A7*&6b.`@<[W@H&nRLNpo[utc$GhVq@*KJjQL_>bnW68?q$d,P.Ab:>ocqS4>W\ql69Nm<BllDi/%i96!i\RO=\>a:e!RDPd2qKm%c#Fo_8OSQmO.$l.YOs)O"+:VbCa1eGhll-::EJE"lqM+p#],i;ecYiUjN0n*p0<h<;O"l8&Pk1>Co*FJ4J+M&OjDWL4Fut>j-4D/%8NWS$h2ULsJ(2UT++*a$(),":a?MV68"L*f`;-m2\L@,TT[G)DeZV9saVWGu8Rl0N9W$Y1a0_UW.G0]h"u@+_m9l9'cs/b0=[MZ0%@%+p;.JBk/YoZ0Q?*+jY&#BlbfL7^,:D?LXpbWoW0sjao$h!9T"qf%J[23R*>Cb%3+SCq):Si60ofBYUMtdY1J#)V&01[OUe+8j'%)n=[BU>:6_h)NKfXqZ%d>O*MXij;aARFgW)['r3';W<IO=tA8!_9>Adk"7;?Xq^4prqNH[>7C2ejTKJS_YkWn\t(S_Y.E(KS#q8H%`#"PKKHD$AWi$NY%aR=$:Gr<kYC,`rS]eB9Fuj"HmYg:Kbi$MFMM:dm:FLlq.@cGfH@<uVg1`thGSVCOeD4\Tc10WA&$4gn7WKt+%>1q[YiO(*)6c_BbacGZD0jDE+44>e<rHo:g2\f#C6bm/rfuSSh>k4a4)pZF_a3c/Rn.C1'40Ordp''!)gZCr`ospt,Tu8t?IZqcQ%r#OGea)r5s,SG#$hR<bOGlR"cI8N+Q7+M:BnBRk!NQ-.*SL]FV\esT?7rfh!k$kgN;nuM@G&[_LW71o@UfN!Zf7k2+6k(!JZd`iA%1e8`Rh*H?*J=JJ_!hFfRW8+WD$</;(^,]O?,i&@HB#b''m2jAj=$5/S.m+%Ul>8\L(rgm3nONDrH1)X[Rrbh/d\T^L=if0sZKV%.%`$<<6>C2coj.o`smaZ7lkD$O2aS'pL\Do>XH8=aUYZh=+g)8YrQf<i9$]dTRSD9<BD3K^HWH1QKJ?;HRWJ,Gsk(n$eWQ19N1+Ck@%oX"qUH)F105@/P[C/V3[8OZ)s[,RF3M\]KofB8#jQo&rp>p1?,0oNc/Vs#3YT&X+QcPfWHgW=(Uno=d<FJ8.Z2iq>P88)/9!JQo.%!6TVFGAt9@"UWJ4"k:B]k^59b97l44/d.CB'#m)P?J1IYfq66FQ=NM(fD!X!M#&KZS:2SNKkJFtnMh_P]ppo:Q.EAU%k\+XV)%A,%_gukgjd;sA%uV70Wr'='22=clXke1G\[DV+3PZSb:-a]=mdRb.4ja&<'%KK1*a=fP_!_5V5QR&E**X]M,/n.*eK3m9D!BWD;N8*.%(tO[BQem2(*WVifn'EtIY/<#KN-+"cX"QG;.l8-1@=*ReO"8"\*`p!;gZ?4'H<f?sY/_:/Ed3h:-'fXa0#Q8s>_`IcI8O5L3R$!W%qR+Q2&s<JOVNa5:4U#p2F*%sZ(Kq\U;J$qkre&t\a7[VVp1+,A"3sa,=EFCHT8[[X^`?kI@@u3L=r?6hdr68$'Y<,1:8&:6^U'Pp%a*#9c:>/Ip;T[Db&'FOQ]1rdL?%+Aj\.>u&0kJ_]r@j,W3e'6FY<QYIj"EOh&-`;Alt/KU5"fS_C@:NGkW!cV(9)Rd9J:[sES\>b%rB?[0!N-R4N9'6C6d=-#;1%$L.ce<-hXe/B5T0R^2o3Y%b5#-^G%:Hl?PPo*9JC\gooh>g*j97r*j(9[:(ZJZ[eOpMOfq>b0m!&;%gS=m0I(6cu2U0K9m^R]FB%[jkLs:@ZHaN`]!h[S^(V^0CInVd*mWrOkfB_Dfodq!ba2_8OA(63WNNsWZH\L(<n.R[>[5jPt<]^"8%2b61EH4\p'4IR&OjW?baqhDB)Hl,Ss/s+'>Se],a=#W3,lk2,/_M>,h9?IdO)r3LO,'73^:qB3>bY^ohBb\^dC6%!BjGg,['sQp^%'mK]510<^Bb0_e+H[XG`4Jd^&MrTb\Q6KKh"G7SZEHh3ub=AaOHPd22AK/rCDf?OO_N^s"8A6-JIk''rRCg[eQoAN9pE;M]esc%g%B"[O_dse=iM;Jrf!GihU'*#Sa8'OPls*9onViT_<T[8TS;MIWa&0%\)lmSFpdrFfcdoiRXl;q\lln0G<?Vgsg#KDmtDRI:">r<5F%csapbFH;Wu?.HeVp':07`W:YVb_V`ZK2ajXHBl3PR0sX-dAo7)"#lKLm:]sD%^Edn0"K1b(QUP2?KrIs3/7*RDWh!s[Qjmd7\Gup%PT+5KF'G8+eF`X+KO/h_63m>(oZPE`QJ]=2f?jdnf\IH(?8;*CRe].*Ce/>q\')X3=CI$oQuJF7YJ4-c5o@MgX+tYc!ODCSF^0DG%e#]sL1::Gu`,Gs8;SKa6fUiEp8<6[I1&k??M/!%rkVCMj(:\NJR#e9+f2RpD-/TW&[b!egg.r:8l&K0tL<@P,".AIWNtP.BcX;(X%oSA7fUe&V9Bid%RjsXLVDes+4Ic+_nBN^Qi-/d+O^,RTZ1_*k6PpUZh!Dk(sS?_GDq!'JskeDj0ca"-P\KW18.S,G*RnW]^9pdJj%[(R%>kZ#>$!>oI-rBrMkS\=j?[$>dQ4Fq9mg5;k?B0U/7:C7W#[MV+brp792O/X1ZPBJk3F-Sn;aR-'_A[Yc)%Pq?@1eM,F%Snim%G@Cl'qk:$dRop8ZZ,ao7DJQ=ZYXjkuI'/N6\]4?n>))(k,n71MISlMXHgIJLXn3#Olcge<7S@q#>/VQC?Fj@C]NZ":Mccfcfm:6:%;*35nN#Gsg&]g2/)h$c;bJUn7]9nSbnG67ook]Xe5H41UrWrq6h]m-Lank,q>$GenpQ=;^TqK"T`*fW4`%mk*R*p>t=@>n[TEt:=%`,0DaI/,M7$sSH_Va:pO=q!^K4na@Zbcj`/1q:^a7X7n8:BNE>OT[sh(J>4TS_.AT^phBmKtqm0Ol>aA4R,EG9iJ9*.2SCI+k,l/%f0DJZfJ(E_W(hD^I(t7'ALGr%Q_VM@i$n/pf5O8&1'V/NW2RXk\/-rq'!eB)WMRkq%j7LrVQJ`dW\a!7p+%p7D4qLR#0"*M&cBS"%]87lT1D!+RH&;_):KH&2H$n>"pUAS*FSC2idpa)DoJM!Ea9[jN3.7@cD&Yf[/!R5:ejgTDD"auuPUc+"eQh/#j;XChd2\dYFJsS!%MoGNgVNbX6ZeWRF'7a&FWJlX`ShP@e\]gW2p)#b]l*\auH+B5TSXc7E(7*>hYh@r1^7O!G^u8e,E]]Q!CkM%b1Na^62iuB9,[<Xp%(bgj`aV[7u@mIek3P#]MC=+t'!"p@eWG+gk[#jJNg%WUGb52p1A`JZBaSqa2EP!s8(poa6Y!;2EqKC<-/:5jJpBlOBj1=cQ;6Et>%G8f;"5N1KkQa7ghJPjsDo`fLKg-Qmh%kB*Ub#%XI*d*ES5>%J:?]aW1T'djMLR=#<K$A3DVZNmqQ0r)Xp8aX-5J'UeUL!R>H,/8d%\b5eYT?A9=^DNHpT.KF#"[.CA!$HX=FL6OHOucTuqo[=S?+eO2'Q/KN%A"Z0ggf=%]!.OXX#\"+7%/r6V`WuV_BR.5fg05D\s(6W%7k#'X:4:o&T;RaGpN'+rk0rc2am[$V2>fVnm]N6&k"Q4)hn0^SdXM5\S5KNp9ihW[Q'"Af1u$6mP0!i`p0%Y2)f7M-$&to-&.ku"%h!+(k<jJtVQ#OGb<'lIM'm-1;mS_JS?F3CX(E&T8W.EW;aEKRI\eWYrJ2X#]@Pf.E1:\26D'<rfWDU`Ke86d65n4P_^kDI7MtYO3%gitufD.MI*L6L/R3+[;WCc2VM+kO?lW8g?S`5:8X]&K;dAiG]m&)6slq.f@(m#9!AR9e`o9X@+:"4ZVh%pEbVpa/kg$#c5,)S8?=%j=u,Ynf184)s,MmK_])<Q^+-.+($^A<k1?>\;[iEGA$ka!kd@7^_$1T&)GeCD&#CFkIAXuie:Y%EJFltUC@D?kd[sSH#2jQe-o<G%Wfu5ZZl9l@e[amNl4L4\1R0_r^]N0<;R^AJ[!3*2+nJE+jq.=lr7[._;_Wc"67([sXM\I'2/(OW#'fAum^VbrB)K1Y-al(LT\<32%YeT]Hdt'Fk*A<;u,tX[qBc;?8lu;@(A<q[rfqlYWY-8eXb_W`p,JsSU*/YRigBYE#qsL?n3ki?a2s3l\$B:mBM,FGfO(!.JYdgj)%k_L,M9&P\"S*:&0nmLo7^Cg@UF3#jn0as0,\1Nd/L!R5bBk/4.a%(#_5BK;;\Pk_5c,aTf93ai"bqsilo<nO`F]a(aIKCeAV(Nke%/PIaTB>-`7?#j7*Wc9KDFn0NdI&/`uc'RU[^$#"R?6NTiehET[I)>k+3GHo&bM;KTQ+s^dcs8IQN&-f"/fNLA3?j%q8L0Y'S=JB1%OpC$0ALE*?Isbm3%n-4P<<'-mVB'SmVb=FY,/R>,?gY/CP*^Sr#n]V6:pr7:AP#IE]lJ5S#*k.Mh"SN9>UMu/L2GXO:Fbbh#j5o6%G<E6k.?MWhL1>GYLV&\<j?W#V^XPX3*Bf/do?,9"XI_$<HCCam36Btq6m&\$iCITif[f6mTX!V9qXlLD`gUT:1l-iEOc-*/5[o7o%;QF^k&>[`9ahLr-)S4An/+.*eZQh_jJO]s4?'4NA=_V9t9A<D%,ic^tq,sejJ^b#TE)5(M.(12DV)$Plg?ttC4L]to?=Wd0'1>fL%4k[>o^B.hJktG,t&7`kEqc7Qhp'ns(1$6"6%L1^%1D&D+(BUk4X]s"-cNQ4Ib-%.[IXhr(!n!Y>"[4o]>kE=bH?OcPf`#"q^qQ>P%&4[)ij(c[f#L(-6,VDl%X_R(/kER>Xg5!p>WgS11N%R"erLE-XQ2kNbW5A`.M)1WH2V9>/%/S^n/!/ZRDI*B8m*fJl46Q_hb$iG@%`IG8e>ch?ihLY8bd^cZkEagfC/)(nBd+E"CpFV`BIjjH[nToi?<a$=[7.jBcW!9_dH9-6s'*,@K5@l+;Kf8UoM>b\>U(u@2kf"-0%qhCYa2b'@tKOj0dmCh@3dl*m2bT/mCWp/q;TEg,sX_S)lr,,%rMtOuWeB^XkCYXcn\f\o!_X(;[&O@)2QbL2gfZq6)r>Oqb;Pc!_%!([8-1=?sg:'4di14Nu&Ysq:LWLg9tld\Sp%!]o4KcAt^Xm:C*&,5KUZ71N4s8L)p?Rnj4Ze*+m@q2l[8Bm3'C01="O#%&l(P$-O%M9&:.,tRha@5F\g1_PgE,q?lOk4AQ<3R^Sb^ZVYa&#N*1Uo<+_mt52^eh)uR1pGoT2,#&AC"?IJ4HapWUc1urDdc9,ANkG=YsUg3%T?IE6rQu:j85_=GVVb=a8(fj3QIHRNp"`>md@BK6>HR4R01[o/ACkI[P-<E&J2K8:KHCDo5bM?6/_&HFKjM(pkW5uD>U.UViYebm%DQf*OKtMHZcmiN5k+a9kH(99R<3&ep\=3O:rbH*#j>r,pBJnn9YI&TNC1a3r3+\2FG(H&VDqCbNHt:<:ROi8udSst!dSt(I[`)i+%LuHr:04uV+h0MV\131,2UX3t'dM-d#*/tn7hH=!(j(dgk@\k4Ak9l(rY&nMts57kY8oJNQKq+PR`oM=snoIjc=;,m`=).*9[Z&GU%ft7a1UWk$pNp>OVP)IAW8'R`'jI'$sTKfq2dZ2h[)"LFKhH9s@,kn,]KpcX^g\b[SM7$ujI8P1<M&9#l.:j1]qL[GUT\P!I]p./#%Ub=es1ZVMF%pte7aILi_Wd2Y\nBLK";f+i!]YYM0",l7Z,bSo&rEsg&HQi@+#!dWJ?9qUi2;hHD&ql?n@$YS7H4A)]Yj=c<;*;9d%@.r\uG,uPJrEgmqGQ8%m(jig<EcLUe;=TDiaNBdGYZ96aO!i@=W%=-X=[_oVS11ct4$/.Ub*Z<WKrod2GZFg,Q*X@5nC%TVcC]ct%X=dofDi5YtJ`I2bb,bDN\dNq]*t;2D1g2rjD]0n&NVn27c>@JX4.:TkV\mjFltGDF^V"odIQ,u1F\V0G[DZV0AJ2VFcFHkW(WcR4%-?aZ*lU$G%'"\dMkas+RPG;dYraJ8qFjFdmO=@dkJRU"+L6e74,Z27bjYT\0Wmb,e:GmTnRFsPYK@q!ng8n8QqTd$PPM+SaDSpr$%#.)+/BB<PSH!F8]WP+L2l-.F(7s=gj0PhY%]Y"UgG^.fji]\pI0CQJ>kU+qTQQH=)%/55E7:``*QuS_RGpQ4,H\ob#FU<SiAMX-$%J6uXb!#V2T%D]/#!RS/HAmYZ0lUq5*5nDQI7"0Ih!3'%lG7D?k0*/kYM7M4<r;%$+i%Xc+!Vl=6!'k&cY6"Fk,lkZPLMHn&>loNk%r[sN;T]^(X2#rcr?35XsZ+8Hdr;%$+XBM-@%7'!`QN4hhcbB\Bf9ZKQ>39)m!!_q_;Z+)us(LjSG5&d]PA6roAgR7pnc&qhs7PYm%VrI^kQMt)Ia@m?K7oi^fO*=Rf`W$FBPq$f*:0b(\SQuQm"/p'5fFEU>!(6J*asnY4fV=%ITbi(SHnonNgUjlTT4rR^9"H#@hQV$+%2.t[tK5d-+X9Y65Pmi#ieHHu74[lslkJn:[7m!i\d\`EjnRai,M88I[@>="\YIedXih'FhZ-G4L^VJt&3f.P.WRPAqQV:h7CG<36%*[h<N5nJF!1S)VLK/VBH5p'%@HO7pg52pUfV[+;9WAdWDO^W\pqt\H+e'.en-H,!R=p\mkA8?JCOWL/[3nE?4H_i5*KV>.RqtZTs%Q-d9`_*nS0,bK"%^S&+j`j`UfK'MsPmftW_Ou9GJh)%GAE,a4c+IRK',k1WJYV0X]))3ZOk_oe107qlb*/RJLeQu%^7fIiEOC2Wd%hfT:p`?#PEgY-;;Fda66mQdO(*X20Vmf!<q*QCBBM)>[7&*4NVjf943&,*K3K4ZC.m4r/DoDfD"/B_ns^$"D8iB9`(l`ou1M5IKJ%Rk9d-Ret_uiX;I/[&$**V\8eGi1QM'JYlYCO_B@ZageCKY-4(1+W%:glMG?"5kJT,N&Y"[oY(:2mn3^"*OG*:^0@LVaaCoI[$2N)%E?@8uDja)$eLai$BafBj?i,n8s6uqfqH6S`F/"I"$oSp&^/2(4C&6Me^Y&2_hfdG#;6En<[<gZOi#dFMS*nU[2odq._G@bW6._ns%"Mc^0cl&F.0n8R"!.=Amr\XP&s)6fg)#h5<0k>;O0)<81N"-1Wrs/N_JR?-al/-s+J*)6,@Jk7qou[O+0[?q^l5(<ecLR.bn'God%S6%_mO"IHOE.3r2if]rAUkKC\(0\Ydb4*'Yk#7PT-utj.U^D*r;gHe6Z_HG\ff6#<g.T(&./4DokBToN9o:>*fLOk2&K7H)r_*9n%W4\q>UGp;7?36Lr60,Pm"7!"FPW4`!_Fl(<a3198@ps7TNN4&&O9V"\@.P3YcDcD'[F>0m8mIM^M<`(NEJ>8iCEOC)'c<(2B>ZW&%j=$+oKbYKUJspG*V$RL0^Lt"6)QA:0"B!X9=CbPX/kQOfTpfO1!)oaQLkQib6(OaZ%,1n[Om.kEH"GamRk6[XB^_'A!B-M-372*/%g\A9.+Ug?*_YF@(N@PXBJKQHe[_Q>h:)aP5i>@-Q!VWdb(hX^(>9m='9'qSjK(&5L^mV;@X?fbJJQS:.OR:KtiA.]*"/V2C"h30Z%Y:f-[:tiVoht@L#5+i;9&K+,kOlIq;Ed3Da2S^jK>N3[=Se5Ol9X'5e:#jm9aJoLd[)`j[MG:_laN$f@.$+X.6#\h$:Jk5p"^_A#%"CUJ#Hs?\;XDrbUA3mZK"\=nXObQAVA$40$lO@e?=@pqJdTU$@Kk58]c#Mr*5SB4n@YBp_*(l(2!^[$".3+L8cN/b;_.nP[GmP@J%7.h00TNYG0NWb!5F:7S!(/PG.)/Xs442AtlHT[r&>/WCqg067h=I&OQZo4]aQ5?N,$6EH41^KUdVcd=08qYT,OW(S\$m@fe)L2L#%<jg=+0*?rBP(iQ1'B88-,bQqo[8.#T$\:Yn3TN0H+A*7Z.$2(K32B`N0.1`8CO-r4`pdMKN&D9.%j2_?`s][O=G7;E0-^TN&A;m;%eAuh(#`IBV,Qg4__IU[DG[Me'PUT3JpkS8/Rrfi&$CinY[>9uPX%p/?64DSVOCk!_)RIFDTmGrnM&JrIDRS6j1J,EYT3DY?ZNW?5%&80SQ`)GGVKI3#30JIegp_[rPM3#!CW*!o<,T)ck`SomV<X[3jM?6)V"PeleUIj/V+<=Jcdc5mg@gg2+AA\-FL?#BOGY]"Sf8;uj%io5isWq8i4+B;BXo8,"NRb+26`^&BZH%r(:T3>S2f$=,5E15_Wb/f`s#R)!hC56\:J0bJ?_I*j?NOTK]&,ZLi'l4p9=tR7)2D3+1%9(`8`W%on-[od5B,Sk3>rQq5d`dNs\,`YP&S;rCOlm0^dBp0g0[gd2)*a-lsP[sm)K1#&NOCM)3)BrAC7F>j9o^IAdEi.)f0W;c[%KW2aa;Wnmh7"MFnDA&be:(#D`Bi,%fE%kVX[,')KO)4q#4:(\HAW^;m"nkM6]>9CVCUG;Q(a*FjO+c3fOj(g)&g3-s=PIZE-HeF\%PspQ%dQ&XjOFk-sC=-1Ap)[p8r\*b[^r]=p=0oCr5cHGpAE3?e@NP.XRb-l4Jg2u_8rY9WWgW%/6&Lj,a!.G?"/Iu9'PFcr%?n3)%1*0>RU0(Fs;,?g*MhYY^BG5Zk(CCKR<BYCKUW&`6hQtp<NB5:GOA\@R<NQ#?(3n/Ub3EQ?`Y`E)IHF[rJ`/$dCL=X"#%S1;!VTY#%"bmgQl4dB_=D&(s+32jD!8SPFQm8"NoZHhb&MuBPoE0.WCJ-6I>8qJ\Ab@eY2[>dTSUKBU:r55T%"LjT!tE%.=[=8mGUiKnKkLNU%H!p^V%Wu8<=cA(R]I)lDJ^k&@(8C;&"/->UoB'lY)R+]fYQ[?1n-?T11.`)b'1VXk`"k$d<+Ng9%DYWYHS>NbgQkaSnShGB6)@'1%GndM-4WQ@.RYWk0!hh1OX?aT2/O2%\D07sk^rQl=$g7mS3GKhT!(R$nV?=9Eb!a!B)!K1`Gh==)BZORIi8RQV5TXFW;HtpR8r7G%%i<2JK\kqNSileu?.De!9F.Vg=:T.@I!^]Pfc\LL"RCEP<m%u70E8.A1+sAq8J::H[:aR=<!!RpUJjZT\"@YX2";%tu8o]2Q!,>JU%j\V9MS01(@gf(6id"72`"-/&T_.k\72SNh4!RtfJiI%r221Q_JHNRYrWhQ%E8`c(-9nQd%3<BGC.YpT\-tSQRb&[WbgDi[eRnPBS%Jp#^*!Jh>`1=>M(!QN-%b)Bdee-LBYW!cQP"$2WM;_:8bTQ]Pgl>'5D@j$n?%*/`L=]BVT!8)0`p5q.0,EROAVc)^ZKc5nJlij2F%;N,A<KeF(Bd0A>K$6\t[,R&k'`SGJs:/YdA#[2@UL7V?l&ZJ=Q1.@MV(G*Y/V);r0'1<P^0HH)J$31OP<mg8:38(fLcrWVA[9E&_%?n/Hj$#@4Rb?b0<!=P3T^dZe*+R>fVo]<oDU.QgNF=K"s2O;/%F:7<A]HUN2#QnI8Zun,BFAU0cTJZm2Spgu(!N^4pFBS2EiHFeQ%fGQ7bg>;s-[`*!F[,"6r.2lpc;?6Fk3&W'!E*iS_]HGS7:^7X;MM52d%qDXKR;_@E'^Yr)"KNd]H(e@tE)o6d^qm>C*Zu'>-8_eD%Z[jlQW&>eO&P!,WUn;gH;-?c'`$s?W)S;mb)Y=Y1b'sF14</^1k)9r<%(p-2T9?;A86.B?Q5E&f7tMC$8>:MnGUTj;"dF\o#1(\I%Rk<@Zn27OD"e-H[.9^ScU1=aO1)U/q9$S8]>!$FL`=c:mJn_IoBE@(id_1Gp8rGRF\0NQ4ku<WQTROqST7Yd)oW98k>:mE>6[Ol1%*p)9E=s:><l/1E01nu@cS5IN3D;Rh.$9LiO$>R)6@ehs](=U$,[[I+(%_#L$.K9V&@er$b2T*9q[:oOK*#^f!SJ%%kZ5bHH("e"u%V$&`4R[q7H76.`+Z67T/395fN;'QE9fe1F@NEDpdIfnRPgM$FBW#!js6+,ss8D@l8r>V9Df\IED8)M`&Ga?a1*"g"2d0n/VPI>c/%!/j7mcp]*[$Q=5c"==WtTe)%B02RF[T+,4])-Eqn#X4Ai/ufBZ@gWIS?p5/%ABPf-eqEYZIT3uah?/1-:cO$oAZS?eP922tH@:N.%J[5t2J@R0Nd\]QiMunnK+H]KCT\'e$iE6e-,/>NefA]ZpAU'Ua#a>?]&niI3D60Zbbb?Y(n#7k3BF\^@V]5-0BQ*-0G_T@$i2s93%d4U<N9Nk+;Woj5tf-DQ$TLhD;6a2.?o9Kn%><k@6Bhp6g_![7P/BJMTdj'Em,3iYWe*6'bQp<2/I]A+LGc0'nI"heF&&^W>l*d\M%f(L7I8B<1ba$@%hkKo$H.!lm>"LN*:]a[RC*a":AnTY$N7e>c:GKO_UPqI=+CbrG$*(Wm/_:"Tn:qR+4U,4>@(U$GqTo"#&'h+I@%JuIXg6QZUa(]s2LIE@pNc=guT:o@Tfo:XIpkKe7\n`XTE36K2&78B?0FLdekPREEd)8kOd*G%?H_ic9K^,2?Ti)Ii(#HnH4kN^n\%]b`07&l/tTlPQFq6cUpQ<n$(uh@jV5VcIH%=toeT<T.VH)qCfIgi*Uk.iUPN>*UMg2..K-*EAudA6qL<`7G2KeF4aI^,BeYTbZ;7%7X>YoR_CZs`H&3rXVijpn"stW+bnrT:mMm6"*0!'l!?KD=lR<JeU=I:n?pr<Lp,(S6@<Y&+qs(]npVHY2dKt(Trc%,DD^,R?<1%Z%e]+B0W^o8&$YW/^$oDH>:mj><s&7C'GcLCB`7[U`6rC=]D,cGXCbsg>B,f-oE?"LO".Y8:5VUJIX;I10\s#E,VY)iA9Qm$9Le>h9%LMI*'P@8K7k>0G-7p8CP/o!E^LB/J<<*^+;2-U&%#m2>m-WCU6k%@4fUW#&'nMRY4d0,T^U*(M&XTe>)]4d='2TSjbKpVEh=@,VH%KgFd9U(#lO/8shX6<Vh*7"$=];c.B&!>8?tj)ch&Edk(.:p$]4e&=b`kql5Dg<c9toEk0pN/C6-"bNT;RW+]6Z+1WKCGo6fl..1f%W*VOQW0)01e'l,k0YD(e?rW%:>HA#_i+.Pn?N]CmZdM)f(!(]4c*fAB@O*(e72j)PA1)%Wh]d%_:PRnDnV./s/"3"Ob:4.&TPYp^%L]Xj>YnnQ:S.BqPI]<SF=I!_T!cSVZ/b/)c@"j+6NmeIq$*,ktE]VPO`rP/a,!%&R[,KA;V$5aR>,,9?)J4]N;Y(3F)If8,D*//<%'J)4)*&Wak_<A<o1)J.m6[9=&R@q^(jf3i`VhMY)(75T*'4d^&"k"=a4)'gV1c3VYWN[!YD[ComOl^Sq*p:rK+5!<\57eQ4&VCNn%MkEMeo_5^Nh<RL!kOn&N,'2Ib=s=9!p-^)GYYEQ!3U!gq?j[6rc9cWb$+E3^A=FkkE4Ulmo`@KM-,qI1aa$Y.I(?]M"AM0P?7ZXX%$AU69h-C72b0hl7HH7?BKPG#h0IDgU#t%H07e=b.RZEgeKAf8BlQ`Xt`mk_AJ1lh6:(29$1uNNZ>_5YW!M'=<8Xai3kf<VU7O1GB%O92Y"*(AGa9e[WG.ZQr\H4/.,Cc`te=M6]Tg*A*O(;^Cs11^%7@3Q*"':1)TEPs;9A?I'CAKF!h?rI(:PY$e3@"?rj3a%6u6le,r%e%5Ns8gS9e1#ut>,lrFc4=tLT!O[($-C(5oS4-/gl@mW1!hUX%bSEf%;/NmHZ<@[AKIm1X9hYgTYWmj8Qt$LKZ]r6;d*p=>2R+Os%^lDC*%9lB3%lG!^E/52!U$#LR`0/Y[LaB(?'MDDp.@/196S)(D\l^^RYiLHDV^Y<`[?q$9>VROj9Y=38FPK_<knp:qP73FX(J@_c%-C1S7;_4'e;cK5g6JC?WQ4ciB_!!,@+`NOc<)oWg&sB!-a9(0(Z]$k9.Y/Q@K2/(n&iPmI]d]2E(0r=c/Z)@54q6"5!A-SK,b>Kl%#SLXdq+/k"5f^5s76#fLko@pqbm!`mZ^aY^@^R>HBdHq7<m622e*Teu%bQJ'Z%#_b"@\u9*n-c$5nAK>o6sP&%r@Ft'$)q_*WgZZ%2-i`D8)b/+8`D;q%#?<nL'm%HW=f'4*9Gd,Tek52Wl5Bm:i"F1*nUPJ\nJ>Xd*<&)QpD5a3CA*1p]4$IA>tt_&$!SWH<>#R;ukNC%OqUQ*%Mp[9//@-ZrP13AZZIj#pZ@sn7m]:DVX-6YI3:d'`BfS>AuJN\%KZ5l7M+g_LO^FQ:3U^D]k##8X[bMW9ICDElp!Yu6+*+X%%r>bJ^^JPNE%'*LcbL<V$B$#,U)'MsqNrj(r5EKWU)m:'*qmAb%6m>7_ec$`*`SUMp-;$N,&N1q-?-95gXl]7OVErG"Kr^2F,f!Y%P]'#SVGDj#:I6fG6p\2b!8%WMd:3h.$W-VT'/(bm@8g;k5ZS;>14%'*QBuCW!4.C=!EP[UisLNB</'<4ke\#[ai4F[?oN?2B_<Po%W\tn@K><QOdDc9!'["?\d!:/C;m^\[("U_K/KOlt,&n*mQO]V+"KWAs$!<*>QiJaipd%V$+<*mA'GEaY=jkJY&=>O_k+'NrX;6^#%Qu+/`J<>Z5@\.J)N[W=4%o>N/.jF*""3+n?0F](r:l/3W%tHQu2C9,3"&`:eCni;ll5=gN#Jesp0@G577;oa[;]Gd@M!(;j!*5T.%!ME.pD(G\-@X+/Ui=&`.@KQRJ>M$/jafQPt@/`G2/[&$j2ja6r)DKNg^$skqZj6=DR$J.PYi3>U,9i>q3j%4[%''l1aa?Kg9iqg@%`)[gs+g@(O":jQ\?m.=oWNp(>OXL>Bk!B'#BJjN.CDGRe&#Tk;CX*QogsY0/NqA=8pQ$$`F<7#O!$:=8:YD<+\m_.mmEOr.CmT&#%*78gn&&+pGVkCG9jS]H]JAPWj'm'PH'Gt[=&Qo?edf1%9fP$UT<H,))&GPURABH+(5<N#n%%'MoH=^\Q$2PL]ea=@K7q.Y!VGH/8%D+qpcK_?d!l?L5Y47qJHfTl*2miQ;MIIWQrVR]O\*EKNrN69%6)qlIcK<tsMT'71V]'BE33=U<fVb<B`ZD:h06=I$FLg/7=4D-u*%[(=nVr?Cm0+l;_`\]]R_Vc/VkqA_@8B65uj90_KG$M@p9"e6ia*(?d]1J+[.1Yi$\pc_1X+(R%Z"(O09^W/4ro4'l,,BV$]p3IW=%d5K]">1ejq_+_"2ipEV\p7K7d0noY;f-JTkfet1n#%!7"<iC5]@RdIpm5GYc2kk.O4#YQ*[15hN8^.42!=g<:,Wkij#]]o07pZH4%Xd<8]!C9N4*rPj^K&TlGCTN\D;2?L92(e2b6=a6e22rTo"+,1`LCdVgXLBM/W"j>`$?ILuL`GI]Ob:1U6"_\IiBd[@fik"7j9Dk>%73R98>miCjHnuSZ/jk//(:O]<@$\M6QQd#\3H?g?,j.TK8^>X&8`F#r6#o#'K&hl,$PJ5T+PFh"ZUeVY!ZFim]Jd.#[NIk(Dj2Y@%O>YPVV]`N9Uq1kg[5RoPnO5.*qbqB`XGKbjk`d;rO>mkCQUCg<1OqhoB:L7.JJ]-C-PG(9<grH)*qka:j=FQS\@Uil^&cO*D,Cp,%jdQR(JQ/?l3J.^/d]kAr0]R7PD,CATgW`t!Lm%F,C/d]h,S8g9PU1:TbqU9F"OYjPe_$mhkhNHh6.'r\c2i(YA%+"?]C`gYO<k,l%ZK.4^33i[_ND<u+WN^ZI4CDYNUEIHq#FGB;Umpkg!79OoWX&5=e=FfD"HS5%5;5,qhhY.5!7jHn,>t2q/S$'l#c%u9\'Vg.DT"/A%1[,/'eNj]QPs#-:FFb,Nc`\RfcH,Ht>#hlupM7"r^_`!Fe]aq4HF,MH6sDAW(dR%7)k%f]+jm4GNPBs%NOHY$&)bT%YI]'%Z.h1m%R^n[1m8fn2j$cW2`Qb^LJp]sO$9VBLb"N[VBC<8uWc<PM#T7l'm11teTX5J2JEi@0IEdi7jZ.q5WeFYQX(&5Bn/H?o%g!Ll(bp7f%@-#Q4)>@En$j<O!mR41s&cEbLZ!nqV\M!8=&;;_Y8fdWXG)KTtNs*mXe!i)oeemm^mss?,Y0@bd%HAM2\[u`qPWg@"k[$QXNb23m%9P_r<;9#-h%/4M[$K@9.6toiTV6>AhU>fl+o$q6L\[ObYh,G?P;Zr@(;1=MIcQDRg=I06)o-'PlVp/JP53nns4!qdi)P"Z%h%Ff9%nYg`TpN,AT8OsQ@6^O$dIR;1"Br>=0;OcfP`=-7gK,=[0gB@2(+ono^&m,?q*[=lTO&<=FAHOjn?@G[n'=8LYbEgtOBO)h[f`r&>%_J[L/bXkr=.$;^eJc7:8)b<GKBHqgu.eIG/OIAlO"'Xp;P(W<C1&k;QP][9@WG!7\eoNJqOEo%FFSG3aj`7>!,_p=maY%?)+u&%Y%]uNG.*+Ho4`E'H-!^,rUI*dRHmB\WsCs8PfE+H'L^Mu+YK6tC!\9n)chLsO$c.kHTEm4#gLj7=X&c)WWT;(VXC5UH4'>09T/<t<l%WKK6uoJ^diQqRC;fGn&6$Emn)cKct6#RRtKGg6l6MlaP;Wk4F(e8k863tXYIUW&trjIHB?arV*7#)arC+J/c(9]M[2nrl\QIdSCc%*Fuk=[Ae!b5Rlmb2?YOM).P#%;CntT,aO3]P%#oKiTm*UrZ`9NKuCX'=i>hT#V#K[Z\ZeW#c#4D/!KB*CQak8&Wk"u%))(NY_:),%\*9P\!T]!$YU9^oEe<2?["U'a5L-&:)>5&FD0TrUm))gJ/J#*jkmKC8q/ZMfR7:QshPV)Hs.u<Fi,LIZYFg$RF'bfL;m&CgI,gSa%\"+t>&S@`)=J^T?5Ubl5XrQI;#]IlF4^qu;3e2P%=R'T&5&Sh,^lVJa>j1>,C@V_iZ"f+qE4k'J?F/BraP-h_oW5QoTI[Q\KanQ&%SMY1K$E"<_RIgJLnD(VK.#VOb\T.-do%c2*o!MR#&$3Vc$D_CFm%%fHmc'(]lK:3+P"+N)A&/"Q'NYX.GX.-KfUA+cOfF1.?qSS5%?4c)4I&iIAN>1(t!MOkA(r>r5<8R%T-CVW3:b:mu0+3k-\ofh#2'@\]enNHIN*ZM4H$N%lV4d/UBd>6laNeRi(s=V7)5f:qJWm7<%Zg0pAbRq[48S2^N[J&D*d28O07NbdT_#kk2D)T,>;U)Ht(sL+MHaG!KdW7C5_q:0%fjMP[j3Gg>g5g3.B\h**o6.SE094I/lOnLd%1F<"V`ejm=O@Ie-P#hn`E$,ZrIS&R1l+(Nn9[Ci+(sXjuS)Oup5N:4RUUg"\^"]@3/Il^_pLP?/GXkO;c($j6S"KR7MuNH9bUa8A%Q$N:%>7)=`RkV#+\@NmSos=9$(W/!_76lDt`9$b[CgJG7VJ,7]Lp')=1Co0%!OUd8A["40^CL-Ldb4'Q!pCV?G_RtBi]\R]#=m>+%1]e'\Ss4bKq!hV\WF,K+g_ZAMJp*i,cf%TNOUJpVom;M:"/=Yt:/01F1u;$7Z>$k:)[=[ejCl99"LZ\](:9W*\oGjGSl9Pa)\9<)%;Z[2E%l):;V\_?OGIf$)G2pZ8%U`Di68:cV<0Y)ZQk2>#H6K/`Vtt)W?'EF:=?)Uo8^:1AHe8%=3I1i/C6?.=Z`U:I5Rl+'YN)Oo%\aC2,Jr0T9m/(48aUiSn/<&'#JpQ/Bn]rcm*O7aG^l\T/M-Zb<jPoTD1+P4;gQ#RX1f2rGI!/dK+DVmM:4:'*R:5QFSDk</h'aq@%><#jN+EurHK:)FBHXW+YZT&\e-NM%;-6f$^OrpgWSN^sd&`8Ct#@8X%L+Jh3,R#hT!56ZcV`^&oZkPZHO!`&+'>cj<M0Ro[ad=c%%qgk?:,7n&+:W;]+>2B@T&Cbb?Zf,IGUpAN#Vj:2u2bVBYMO:T2+bnY()7'-GcFe6Ti:n/<2pJCub`LEOVCG3]S$GK@hZQEcbQG\,%Gs"QseiKY:=350PX%8;%QNC0kOOJf0g8jf"PWr*7-Ie$IqaN,NbO#d5R4NH8h;$7J%a*@W10g)go"+A.D30`Ql>"BF+gZ,n3K&^!%(`&k@M^.\<Y%:PdG:TH=+DKg>=l5&2bp_q'lj>Ye+NGS<:C0Ul%ff/s7h0+^>%cp8jUq-OSE0n-#85!pW+,uo#^eJ[Q&;]2TX;BG%5f>(\p'Fi_KIbP)jR,/B.FEAP>_)?r>eLhif2\"np&#lnSP)MHb0JVVmRE;/ch5cuUA<%>]nKM?4V,n`VYZr`1%6sZZ%iaC1GN31%kim1m&!b4lR'.gKb7,NbC6kfkj\$D04S9**j=eJQ7L)Nm?i[`U'5D-$@l$o$(\ZA^jIWq!UjqOM"/k97qtbRG@s9S;"FfjI?-XN(%Ej[_k@=l_g]3da'NaOtPI[\_699e@'QHTsQb9[Xc\W61M/"&>aDKd5OSfN)h2`&ne:9-(7[/oPgT10X&*XbRBQ%sO<Co2[5T^=9U%bEM,C>ss)37Z?%A?6ll![C_V"IQuOl=hC*'_l_`0F,D%+/jm;5qU"[$F9dhAG:;@6CJaHMMbGQ^b$Di\2"-+)4*7LQ'$'l).9j@#%&FUNj`Wp-Q"Uqhq5k`WCB!+l?l(\-MgOW:,?&tXrQhs"opTml3%33W16[o%g@)rM]:X:kAmQ"bBkHC:_,LhIHG7002_iTn*oX]a]%DVJ%Tcq;df=7!`*^@1rmfR[C(T);XU$@K[l#F4]KkpU`.2UcAo$onVcBm0#b=7$L[\fIY5*ZEYt(6T("k0`SAAouk3XGJiJT2`E3%*6g*$;X=`Qb#+5s]LuQf4642fo?3\A"fmsM]O3AF)mRmkIDsc(aFR(o"M'PZ(47ON'*u8lFJ($CL.j>i1>Y7B'S,\_SUQ4EH_pUZ%!A7&<nS&.E;J2AJLbOX9k5o65R+\s!97tJ]Fm#cR:DqM=`%W?bLtBVW<D\1,olcgSA<K@]85Z3q$,@Ne^OsQCaS&r/`tt+'f0ZP(%ZH8m1(t7/K;;6+?;,ga0DBQH=aM+alW^^<iC<A7+8pT-e]3!R(kCE1=?/\&eLl;QUK!7b_X>JJ>4>29o53](g?"lIAjO<ML.`3J&%-nIss\[t#6ic)?cUfW)^D<A%oq(dp!)\3.C5,H;#LjNjp\FLVoU^kh1\p#lul_3OoRdT:4cN,alab[5DZV+es-<oCZb;12,'=Nth%I$&ahG4SnYgN61[H9RtHE*I5>0.qH"mRP4$X\JEb:)FQH\bEg42M1k9@9FnSeMOlRf/1.F#KR6]ij"IhGp)o,H3sE\lA=bhW$?"X%;T"@"FM!,B6`Xh@I=![BYXH^unFjg[%S(=aNg8k$a=M5'[nG-5K4`7%]0d1S48A+I1@C7J_3;30-!N?^Sgl!h\)`F@;LOd:.+#id%b@W3fbkWb9(N(oB!]"nu/Mka.bNDMrFYPn@Nd,c>]cI=&?/e_7<bon.Csip)>Gf`Xl8^=T?hp5ZkGctd+(*<WV[o,=&<t2EKD9f;%P]fH)IVlK*@7n*7A4Rqibgd=lW"oe0W?-#sJiFA==bUO)?2#r6F>"1TW1S<]p]FO3E\iU/*j_HEIPOl2=hds`FR?seOX$D,<cHCj%-a`S?<bt5?'6HJ\0LrL6Q'?5kAW&%ui8!@D^l_ofE4Rd(-d2\,R[J]%JE5kZB4!f5e$A*l73lu:Ft)sD$7l#a!C9&7*Uet&AUe7=%U67qC5k.4=f2dgI'#AY66e8kL[mW+oO:7h:e^/=hh4lBfD[l!/No-q@!>AOU(561-BL.';*O>S`_/io)AS<q2Z/[GRnN-WKa5ohi%rNellc^<Dq\6_?:gdN:slP>q?qo5JFc3,u8lZTC!$7KWsA^g0Xj+e)#KJ+`8\6O8tkfIke\m;&[1%CV6,,7$b#Ak@GM"704hqG2U%^JT=k=4jFuL"cVOAJ2h+Q3Uu\*._a7qLH/10F8;%fkg7r30V>o,\MF:J%#KG6.Y4^S9H%e0qX&h'8B(DYV2cW[<r>L*<QD7Kk5mp%&;^nWdARs$(4-HJ#Fd\mJSp#458j%H^+l:$8;8p(K"8rLB=IOhZFa2#A<"OXJb(p6Qrj]/#%t!)V,&W@#;J"rbRaJ6F9(gcYYaV]%":Mm"EdtCFO[("1hn+p]?'e#tLup).$aX%pWt4-,#=9Ndj7a+h/h+/rQE!VINO:[[8L\7N;418c[tT(mZ:4:c(C:.5JJ>#75aIa@%bJ,d!AY%N5Qfj"J9#>IEc%<i!bH(qK@j<4fF:W$]rVuqp?W4fafC:s'WP5bX!tC;+'\p`D2Ku,8E[6,'k>h/f_hWo'LV/OLn!5KN%$`-`[&cM7K*]pnB"T^`cRbkRcB%+rqG77%6ZUgue5dkIjJLT=['`E"T:CqtN[3:PXW1YUPp[W#ujfN`ndK/,X'+pg_!8=]Uf<8\:%$psgaFQ8dejF`hR>MUNY<\412Vkej_DB%>8COhA=]/pKu7LSQ&+KlcVFVBo)GhNiHnCoQ]+Ej!Yj7%UsY+3UU(M%d>G#T6+"Mbmf%S7a*^hbM:&p(;W3Sd;Z@J?`e:UQlitF0PdDq#P]XIUt`T4IMPq#9b[U9Ag&LWbi.sh]quQ3FmI.c%fPI9\KphNjt,iXd='RZJ9/:%HS2/*[BV@>\&%kLX=A<TI,?N8-Y6Sub/QsBRb1Zqf8f[VjlHtt+I(%'X9[0h$&60c;lX#;[1NTLptR\j54-&X5M<n,.?&Ik2n(e*%etGQ*5]Prh56Gk;+3Cn?6p.icF=bg`5%c\0&R^nji1$1cR(mPuI&gVY"Up,HO%g'KojsdRO:lgJ[p\gQ+(N1^CFbj%]FEQl+@U)b%4_Imi--%:-F=mW:P90ten46>`FUrZsd3jf&M./bfS#4fZFCPj1[98\E<:N8UhEqZHT-t6q4.A_HLuNm9qj4VX1%bem&u0o%k<mNm%,5FQ/D>>;XSnmE>-s==TF1g%AY7_BC_\,D[MD9hdfbRgG3odI=OVQ$8W)[.83ik'\?1&e@,ntUKl?IUd/0NUtXTqlZ(0]rumq]JH%>[N_Z_gOE!$ETb8&kEErI[%fN:QeAbE`K^Tru:miDdVuVRHD4(Ih6):#HCUBJMF3u9Du9(+p#eQf3H6.]uQV\f%p:X[QhoE1fupj%6G!uTO@9'Kb2)998,-(:omg&;W$29r6eT>TKe.pA&#(Z;A9BkJcA$(:%T(<$<!&e#=u\(?9%g9okt#L::$4B/;ii$MW"?ES@;qMT%7\\'#[-K"?8P#i7Y9]Or3Tb!?JQI4$.5Y#pd&-]uSnIL\"<ngKX-"Z9h4_DVZh"9o#U-H3@Ns\1K2)VeQjO!?9X\9Alr<E]Kos=)%*nLlGAff:&<ZYW*LN+Od+S<H?01#gRIZ=GQ'DX_7[A9e4H`c95l)i3.][4oE)hXDH`2u5`AHJW4`&#?d$A%,LVN9:j?VXfi4!WYN%aP*bZDX&5M!Fj@0.PYPQF.G]l%7H>"hpDZhq]=e@e*%-<6r#uF"<kY.JtCqkm<JVE[4WAC[*=t`+PG2G,Grr9C7F%</=Ht0pNH06%fIU$t;6Dcg:LpFNj]LOEF%9R(@7(.G,&Q-;!UFQT!,5[Ma^*$P&Q::bOP;%n[$ud1&J85kBC2^!Jp2&)F5LI;/?!DO`ciIM3FG"_%JjX&I&S!1(eDO"q5`l^%Q&HQPgV.kSWd/Pa`b@GAq20qtG9bU#CA&jOfjMc-'3q\niH%W:B"1fO)H_"mKVF:\guu?%PHY6i/El:r%"Wi[Jlap.orF\k?`t%N2J"8':+_AqD@8Npqksp*#DQC>gV[E>c7<<j0$SgB#^+?/Ygqo>^G(oL,G,sT/qu*DNm.iG=^a'rp<kkb_%L^+H@'Q*.Vnc6[EYt&4+_NL6\6KX)`_EpM1aJtQZ)e!tp.S3JGKLmVqH#%ACZ<#Dn6&tOJT&_(,(3f=WR@Z2dIO`74n2!Rs\]_!c%q8m\j"g-3nCmF[=-?gH68[D(nD@k'Lbu;,PO:(c/X+5V@[@gp$@V_%#)=5=:r8-8`[&2XdQ'A>H;]##&g[73=s12K%3lXEV<r$?C%\Hqc3psV,*(t?!<\hR$Ee)B(!5R:Rc"`=b0BmG<H(s'FCD@@X-c`k5do5d-2^)I0b>J7Jt.]]q8)Zp=*`k]FG(gqd@>7t)Y!938N%Y\[eLp$eg1R5"\JK_+GFRU.@_)[!0YgRcCbb+jjPkJdM%?hn0R(]]>ceu(6QWMe"KN<+&QB%6FW'ZgD0D@@4k`PtC*.pjah+67m0%V_J046%0XQH'nB\HPK2IbN]oH)8*O%N.D/rF+`3a363fY+speBWu1/b@OP/U,9t>hK*Wp<eML.2N<.B`'W!q3!3lGZ#!asn+l<*K%;!D%<#)[!=*>o_,2[1HQ@fW.SWt4q7GWOnAL=+o^NgRh?c(_k`D%(q]iVA21'HPCt-WW]0d249#"aZmt5`Uu3lZoN)NnW4B67h6e%k^3cm)N_?6e2msY[#kb\f"_k=D@I:is(u8='[Pr*`W3ae@lmf4!"-6\BFD%j>DoAoVj$ja$6W.sO)RHd"I]B?rPe6+H%*jS$a95@%Uat9o+Ec0LL`Ru:f'`2&2H:H=:[rV-/YlM>fPMn4r=S)DeE2Ls?Z11sbB6n`;1ad9]rh"'&CtD"]aeba:EN$5^Qt(=.CC6g[Rboa%(XG*Cd'l7l<]BEQW`IM[X8Ncl>u/$g[3*;MOm$OE5)XHN]2F"M+D6J]B#NQ.p7Hg1=fG5gqU8SD]t2p3Q(6%aC4AWVm>mX[3>k$s%Z&m[hIda662=!mO8*rf2't5p\7P0KJ8$/E6^Ff288j>q$2p\RudN9'&qBI>`+36ffjf@WN%@ZWddG5.rP.<CqBCJnKBf2GlR<P55%o/aH,>GasA8!*t=7!dE]A3l`JCj5QY3:#Q0\e2U;/e5M*gNT^dM4j`??0qEdaKk/[d2&%c'rC/c"sp+,7$[=BA9%U49pOdJ7-kI.%AUKGhW-Fj($If@=7.Tt*'8ItGq+tV<As*2VC(P&=28tah6lFBBOY,T=WlZ4]X"AW@^hIR[l41$Zo6@\VRqh8oTPE^hZo<L5'/:BJ%@]lJ>q[io/K@LE6:NHaUhM<&AY.0hf<b;32S1/=4&jT`.6e_MsA#$]#:i=I'ahIL??c,70T2F(R(_nU^>kA.OF-G!dJ*0?:<J*+A%l2#Rof!ett>c0_('LaX>l+X";1d_i/T8$uH>X+$HUQ<&_:Bo/E?^I^14,@?e;FB$n)nR4=oSKP8qpnTkWg^PG',E."G^<$rY@fGE%X`_?lOd5*FV%nY4dK$Go0INOQ=_,i<l'3cMJ3+%aRc[>"UeH)E@8$DASlg-`Lb\mt.>9`jh8uX?$Zkk2dtS98'er+*r@+*q#U<Y=%RQEZZi=7ej(tn7OF2pqB+*.\O+#4G`gjrq_h%sP_%L0hs1:Xjs7q*Ldgk"t>rFt]Xki\A+XfUGr5%HlF_YMlPRldG-jCmtCc.3ru%c5MV@D7d?2=Lb7Zg,-K<k'O0W3QBP'kuJY\Qog+&k8);_`2SZ7M;6l0)lZ;J#KtTaB^Tt,5/H%-S@-fqRHCpm06"i"9CN$?VUV?R%K0^pNjRs)76;Gs=muRu>K=qA)MjL]1]lT9FmmPC.G'D9P(-,Zm@XEp$i<S">@B\c2%A'.RdHqc54a@P,Z$<j.f-XT^33=c&MhctR%)(hG9\3u7B/098ciZUVbAriJ@i".A[ZWjuVZ7R+sPA0&knJoc\7c\X$*iTtJHEukliaIO2McKA'hj\@2ZH-[*<Hl8b\7U)r&oi>(%4?^;CH7YX45MY6a2lidh()rgLOPJ^Wc0C7)H`&q;`9eQjV&9rum%$pBn$R]5m5_70q5f\;@f^>!Plm\MMl4Wo$1V^D4OVO2XY.B8%4jr/aIDRDN_bkkQMQeVA+Mk(&N2o3WF.9T!nb7TqjS2HGmjTQ&foImEP'Q;EaocCAGVQgqQ-MM9J`36R$1n9uX3*nFPp\1.p7\U)%a\9Nk6U);Yhs"dh=A!R3,66dC8J^>Aj"ZWH`c^]LCR+h#E4Q7.m/.kOFeDs\%_8M[(im'XMX7I$3/Q_/bGciPQ0=;+>je=2iUfTR%"m0=d\iA3a;1bd9>32%[M]Z.oJ.*@GDQ;jXT_68NbqdZtn*KZ>`T<,+]2C)%i`Uf%-+!lX0_6V(m:coLUQNcWI9IpsU"R)T!'%N'%6dC3KmB[T!a]P:*FMU='66DJ6F'=9K8ABEj>4C@B=B)S9@i6sM0AL[$=LJTq8IsG/*Lk>([gX)hL%ZJfM)Ka7j7:?J]&-YFqKB:m%n*HJ7\`\%H:nHs4-"5Y5Bis*hBpFa`Yd2aZYmd!)-6\"#?,<EL^^@:4";l5hH4lCD+d=^qc*We`R)iO$G-+OjY+5.C-5p^F^*.1_%:b9'Za=cIe))*Vagj4j[mToh-b+U$MnOSJoGHD`]fU31N^=rqTde[+Kq57mpo1LHla;M!3QUaj\>ep&lS?YgebS=d$kj;s2MbmQh%ku>7("s6bX+&c8:kmP\sBDtQfos(4:7Pt,[J8@$YbSD<_3b8%>r7XZ!D(mbHa[2I6j,f8_kqDCt#:!2U&@J;JYj`TC1`*>Ws+N+-%o`E<diRhm=6Xr:FH]7-"^6Bi4BJkuT:L[Bh*DS]+Du]IkkC<DrqB(4cjZhY:rSRA,rplC/5QCY"hu<?JhgbOs?U):)p>p5-J,>l,%5CNFjQXBdfp;cq-?N9WGhgYJ%q]ETPpALoHs8M?a!a1S/o:LO3lbEGjQi@;h)Fr<~>%AI9_PrivateDataEnd